{"version":3,"sources":["utils/validators.ts","Components/Login/Login.tsx"],"names":["maxLength","required","value","maxLength50","length","ReduxLoginForm","reduxForm","form","props","onSubmit","handleSubmit","createField","InputWithComment","type","error","Field","name","component","captchaUrl","src","toString","alt","placeholder","validate","connect","state","isLogin","auth","sendAuthUserData","to","style","marginLeft","data"],"mappings":"uHAKiCA,E,uDALpBC,EAAW,SAACC,GACvB,IAAIA,EACJ,MAAO,qB,eCYHC,GDT2BH,ECSI,GDTkB,SAACE,GACtD,GAAIA,GAASA,EAAME,OAASJ,EAC1B,MAAM,iBAAN,OAAwBA,EAAxB,cCuCEK,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EA9BL,SAACE,GACjB,OACE,uBAAMC,SAAUD,EAAME,aAAtB,UACGC,YAAY,mDAAiB,QAASC,IAAkB,CAACX,EAAUE,IACnEQ,YAAY,kFAAkB,WAAYC,IAAkB,CAACX,EAAUE,GAAc,CAAEU,KAAM,aAC7FF,YAAY,KAAM,aAAc,QAAS,GAAI,CAAEE,KAAM,YAAc,mFACnEL,EAAMM,OAAS,8BAAMN,EAAMM,QAC5B,gCACE,cAACC,EAAA,EAAD,CAAOC,KAAM,mBAAoBC,UAAW,SAA5C,mBAGA,uBACA,uBACCT,EAAMU,YACL,gCACE,qBAAKC,IAAKX,EAAMU,YAAcV,EAAMU,WAAWE,WAAYC,IAAI,YAC/D,cAACN,EAAA,EAAD,CACEC,KAAM,UACNM,YAAa,qDACbC,SAAUtB,EACVgB,UAAWL,IACXC,KAAM,SACE,gBAoCPW,uBAPO,SAACC,GACrB,MAAO,CACLC,QAASD,EAAME,KAAKD,QACpBR,WAAYO,EAAME,KAAKT,cAIa,CAAEU,sBAA3BJ,EAxBD,SAAChB,GAKb,OAAIA,EAAMkB,QACD,cAAC,IAAD,CAAUG,GAAI,aAIrB,sBAAKC,MAAO,CAAEC,WAAY,QAA1B,UACE,8CACA,cAAC1B,EAAD,aAAgBI,SAXA,SAACuB,GACnBxB,EAAMoB,iBAAiBI,KAUsBxB","file":"static/js/5.cf4a8212.chunk.js","sourcesContent":["export const required = (value: string) => {\n  if (value) return undefined;\n  return \"Field is required\";\n};\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  }\n};\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { Field, reduxForm } from 'redux-form'\nimport { sendAuthUserData } from '../../store/authReducer'\nimport { AppStateType } from '../../store/reduxStore'\nimport { maxLengthCreator, required } from '../../utils/validators'\nimport { createField, InputWithComment } from '../Common/FormsControls/FormsControls'\nimport { SubmiteAuthDataTypes } from '../../common/types/types'\n\n//const Textarea = withTag(\"textarea\");\n\n//const InputWithComment = withTag(\"input\");\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst LoginForm = (props: any) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      {createField('Введите email', 'email', InputWithComment, [required, maxLength50])}\n      {createField('Введите пароль', 'password', InputWithComment, [required, maxLength50], { type: 'password' })}\n      {createField(null, 'rememberMe', 'input', [], { type: 'checkbox' }, 'Запомнить меня')}\n      {props.error && <div>{props.error}</div>}\n      <div>\n        <Field name={'SendAuthUserData'} component={'button'}>\n          Login\n        </Field>\n        <br />\n        <br />\n        {props.captchaUrl && (\n          <div>\n            <img src={props.captchaUrl && props.captchaUrl.toString()} alt=\"captcha\" />\n            <Field\n              name={'captcha'}\n              placeholder={'Введите captcha'}\n              validate={required}\n              component={InputWithComment}\n              type={'text'}\n            ></Field>{' '}\n          </div>\n        )}\n      </div>\n    </form>\n  )\n}\n\nconst ReduxLoginForm = reduxForm({\n  form: 'login',\n})(LoginForm)\n\nconst Login = (props: any) => {\n  const submiteData = (data: any) => {\n    props.sendAuthUserData(data)\n  }\n\n  if (props.isLogin) {\n    return <Redirect to={'/profile'} />\n  }\n\n  return (\n    <div style={{ marginLeft: '20px' }}>\n      <h1>Please login</h1>\n      <ReduxLoginForm onSubmit={submiteData} {...props} />\n    </div>\n  )\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    isLogin: state.auth.isLogin,\n    captchaUrl: state.auth.captchaUrl,\n  }\n}\n\nexport default connect(mapStateToProps, { sendAuthUserData })(Login)\n"],"sourceRoot":""}