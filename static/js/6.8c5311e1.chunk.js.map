{"version":3,"sources":["utils/validators.ts","Components/Common/FormsControls/FormsControls.tsx","Components/Login/Login.tsx"],"names":["maxLength","required","value","InputWithComment","input","meta","props","hasError","touched","error","className","style","redText","createField","placeholder","name","component","validate","Field","maxLength50","length","ReduxLoginForm","reduxForm","form","onSubmit","handleSubmit","type","captchaUrl","src","toString","alt","connect","state","isLogin","auth","sendAuthUserData","to","marginLeft","data"],"mappings":"uHAKiCA,E,uDALpBC,EAAW,SAACC,GACvB,IAAIA,EACJ,MAAO,qB,gCCGIC,EAAmB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAASC,EAAiB,gCAC5DC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACE,gCACE,8BACE,6DAAWL,GAAWE,GAAtB,IAA6BI,UAAWH,EAAWI,IAAMF,MAAQ,QAEnE,8BAAMF,GAAY,sBAAMG,UAAWC,IAAMC,QAAvB,SAAiCP,EAAKI,cAKjDI,EAAc,SACzBC,EACAC,EACAC,EACAC,GAGI,IAFJX,EAEG,uDAFU,GACbJ,EACG,uDADK,GAER,OACE,qCACE,cAACgB,EAAA,EAAD,aAAOJ,YAAaA,EAAaC,KAAMA,EAAMC,UAAWA,EAAWC,SAAUA,GAAcX,IAC1FJ,MCdDiB,GFT2BnB,EESI,GFTkB,SAACE,GACtD,GAAIA,GAASA,EAAMkB,OAASpB,EAC1B,MAAM,iBAAN,OAAwBA,EAAxB,cEuCEqB,EAAiBC,YAAU,CAC/BC,KAAM,SADeD,EA9BL,SAAChB,GACjB,OACE,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACGZ,EAAY,mDAAiB,QAASV,EAAkB,CAACF,EAAUkB,IACnEN,EAAY,kFAAkB,WAAYV,EAAkB,CAACF,EAAUkB,GAAc,CAAEO,KAAM,aAC7Fb,EAAY,KAAM,aAAc,QAAS,GAAI,CAAEa,KAAM,YAAc,mFACnEpB,EAAMG,OAAS,8BAAMH,EAAMG,QAC5B,gCACE,cAACS,EAAA,EAAD,CAAOH,KAAM,mBAAoBC,UAAW,SAA5C,mBAGA,uBACA,uBACCV,EAAMqB,YACL,gCACE,qBAAKC,IAAKtB,EAAMqB,YAAcrB,EAAMqB,WAAWE,WAAYC,IAAI,YAC/D,cAACZ,EAAA,EAAD,CACEH,KAAM,UACND,YAAa,qDACbG,SAAUhB,EACVe,UAAWb,EACXuB,KAAM,SACE,gBAoCPK,uBAPO,SAACC,GACrB,MAAO,CACLC,QAASD,EAAME,KAAKD,QACpBN,WAAYK,EAAME,KAAKP,cAIa,CAAEQ,sBAA3BJ,EAxBD,SAACzB,GAKb,OAAIA,EAAM2B,QACD,cAAC,IAAD,CAAUG,GAAI,aAIrB,sBAAKzB,MAAO,CAAE0B,WAAY,QAA1B,UACE,8CACA,cAAChB,EAAD,aAAgBG,SAXA,SAACc,GACnBhC,EAAM6B,iBAAiBG,KAUsBhC","file":"static/js/6.8c5311e1.chunk.js","sourcesContent":["export const required = (value: string) => {\n  if (value) return undefined;\n  return \"Field is required\";\n};\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  }\n};\n","import React from 'react'\nimport { Field } from 'redux-form'\nimport { withTag } from '../../../utils/HOCs'\nimport style from './FormsControl.module.css'\n\nexport const InputWithComment = ({ input, meta, ...props }: any) => {\n  const hasError = meta.touched && meta.error\n  return (\n    <div>\n      <div>\n        <input {...input} {...props} className={hasError ? style.error : ''} />\n      </div>\n      <div>{hasError && <span className={style.redText}>{meta.error}</span>}</div>\n    </div>\n  )\n}\n\nexport const createField = (\n  placeholder: string | null,\n  name: string,\n  component: any,\n  validate: Array<(arg: any) => string | undefined>,\n  props: any = {},\n  value = ''\n) => {\n  return (\n    <>\n      <Field placeholder={placeholder} name={name} component={component} validate={validate} {...props} />\n      {value}\n    </>\n  )\n}\n\n// {\n//   createField('Введите email', 'email', InputWithComment, [required, maxLength50])\n// }\n// {\n//   createField('Введите пароль', 'password', InputWithComment, [required, maxLength50], { type: 'password' })\n// }\n// {\n//   createField('', 'rememberMe', 'input', [required], { type: 'checkbox' }, 'Запомнить меня')\n// }\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { Field, reduxForm } from 'redux-form'\nimport { sendAuthUserData } from '../../store/authReducer'\nimport { AppStateType } from '../../store/reduxStore'\nimport { maxLengthCreator, required } from '../../utils/validators'\nimport { createField, InputWithComment } from '../Common/FormsControls/FormsControls'\nimport { SubmiteAuthDataTypes } from '../../common/types/types'\n\n//const Textarea = withTag(\"textarea\");\n\n//const InputWithComment = withTag(\"input\");\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst LoginForm = (props: any) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      {createField('Введите email', 'email', InputWithComment, [required, maxLength50])}\n      {createField('Введите пароль', 'password', InputWithComment, [required, maxLength50], { type: 'password' })}\n      {createField(null, 'rememberMe', 'input', [], { type: 'checkbox' }, 'Запомнить меня')}\n      {props.error && <div>{props.error}</div>}\n      <div>\n        <Field name={'SendAuthUserData'} component={'button'}>\n          Login\n        </Field>\n        <br />\n        <br />\n        {props.captchaUrl && (\n          <div>\n            <img src={props.captchaUrl && props.captchaUrl.toString()} alt=\"captcha\" />\n            <Field\n              name={'captcha'}\n              placeholder={'Введите captcha'}\n              validate={required}\n              component={InputWithComment}\n              type={'text'}\n            ></Field>{' '}\n          </div>\n        )}\n      </div>\n    </form>\n  )\n}\n\nconst ReduxLoginForm = reduxForm({\n  form: 'login',\n})(LoginForm)\n\nconst Login = (props: any) => {\n  const submiteData = (data: any) => {\n    props.sendAuthUserData(data)\n  }\n\n  if (props.isLogin) {\n    return <Redirect to={'/profile'} />\n  }\n\n  return (\n    <div style={{ marginLeft: '20px' }}>\n      <h1>Please login</h1>\n      <ReduxLoginForm onSubmit={submiteData} {...props} />\n    </div>\n  )\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    isLogin: state.auth.isLogin,\n    captchaUrl: state.auth.captchaUrl,\n  }\n}\n\nexport default connect(mapStateToProps, { sendAuthUserData })(Login)\n"],"sourceRoot":""}