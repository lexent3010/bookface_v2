{"version":3,"sources":["Components/Content/Users/Users.module.css","Components/Sidebar/Navbar.module.css","Components/Footer/Footer.jsx","Components/Background.jsx","store/selectors/usersSelector.ts","Components/Common/Paginator/Paginator.tsx","Components/Content/Users/User.tsx","Components/Content/Users/Users.tsx","Components/Content/Profile/AvatarBlock/Avatar/Avatar.jsx","Components/Content/Profile/AvatarBlock/AvatarBlock.jsx","Components/Content/Profile/PhotoBlock/PhotoBlock.jsx","Components/Content/Profile/PostsBlock/Post/Post.jsx","Components/Content/Profile/PostsBlock/PostsBlock.jsx","Components/Content/Profile/ProfileBlock/ProfileBlock.jsx","Components/Content/Profile/ProfileImgBlock/ProfileImgBlock.jsx","Components/Content/Profile/ProjectBlock/ProjectsBlock.jsx","store/profilePageReducer.ts","Components/Content/Profile/Profile.jsx","Components/Content/Profile/ProfileContainer.tsx","Components/Header/Header.jsx","Components/Header/HeaderContainer.jsx","Components/Sidebar/Sidebar.jsx","store/appReducer.ts","App.js","serviceWorker.js","store/navBarReducer.ts","store/reduxStore.ts","index.js","img/effects/preloader.svg","Components/Common/Preloader/Preloader.jsx","utils/helper.ts","store/usersReducer.ts","store/authReducer.ts","utils/HOCs.js","Components/Content/Profile/Profile.module.css","Components/Header/Header.module.css","Components/Common/FormsControls/FormsControl.module.css","Components/Content/Profile/PostsBlock/Post/Post.module.css","img/user.png","store/dialogsPageReducer.ts","Components/Footer/Footer.module.css","api/api.ts"],"names":["module","exports","Footer","props","className","s","footer","Background","getUsersSelector","state","usersPage","users","getTotalUserCountSelector","totalUsersCount","getPageSizeSelector","pageSize","getIsLoadSelector","isLoad","getCurrentPageSelector","currentPage","getPortionSizeSelector","portionSize","getCurrentPortionSelector","currentPortion","Paginator","totalItemsCount","onPageChanged","setCurrentPortion","pagesCount","Math","ceil","pages","i","push","portionCount","leftPart","rightPart","paginator","prevButton","disabled","onClick","map","page","selected","nextButton","User","userItem","avatarBlock","userAvatar","to","user","id","src","photos","small","userPhoto","alt","followButton","followed","unfollow","follow","infoBlock","name","status","location","connect","usersAPI","setCurrentPage","getUsers","useEffect","Preloader","pageNumber","filter","u","large","Avatar","avatar","AvatarBlock","isOwner","type","onChange","e","target","files","length","uploadUserPhoto","PhotoBlock","Post","post","text","postText","likeCount","PostsBlock","newPostText","React","createRef","postData","posts","p","postBlock","textarea","placeholder","ref","value","current","updateNewPostText","postTextarea","addPost","ProfileBlock","useState","editMode","setEditMode","setStatus","currentTarget","autoFocus","onBlur","updateUserStatus","profile","ProfileImgBlock","ProjectsBlock","ADD_POST","DELETE_POST","UPDATE_NEW_POST_TEXT","SET_PROFILE","SET_STATUS","SET_PHOTO","initialState","usersProfile","position","responsibility","telephoneNumber","dateOfEmployment","setUserStatus","profilePageReducer","action","postId","Profile","profilePage","profileImgBlock","block","fullName","profileBlock","aboutMe","projectsBlock","photoBlock","postsBlock","ProfileContainer","userId","this","match","params","defaultId","getProfile","getUserStatus","refreshData","prevProps","Component","compose","profileAPI","auth","dispatch","a","response","getStatus","updateStatus","data","resultCode","photo","uploadPhoto","withRouter","withRedirect","Header","header","logo","isLogin","deleteAuthUserData","login","HeaderContainer","Sidebar","navbar","background","menu","activeClassName","activeLink","INITIALIZED_SUCCESS","isInitialized","appReducer","DialogsContainer","lazy","FriendsContainer","LoginContainer","App","initialApp","exact","path","render","WithSuspense","app","getMe","then","Boolean","window","hostname","navBar","navBarReducer","rootReducer","combineReducers","dialogsPage","dialogsPageReducer","usersReducer","authReducer","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","getState","rerenderEntireTree","ReactDOM","document","getElementById","subscribe","navigator","serviceWorker","ready","registration","unregister","preloader","updateObjectInArray","items","objPropName","itemsId","newObjProps","item","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_ISLOAD","SET_CURRENT_PORTION","followSuccess","unfollowSuccess","setUsers","toggleIsLoad","newCurrentPortion","totalCount","followUnfollowCommonPart","apiMethod","bind","SET_AUTH_USER_DATA","SET_CAPTCHA_URL","email","captchaUrl","setUserData","setCaptchaUrl","authAPI","sendAuthUserData","errorText","messages","stopSubmit","_error","getCaptchaUrl","url","logout","mapStateToPropsForRedirect","fallback","SEND_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","dialogs","message","newMessageText","sendMessage","updateNewMessageText","newMessage","instance","axios","create","withCredentials","headers","baseURL","get","delete","put","formData","FormData","append","res"],"mappings":"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","file":"static/js/main.7d4f56ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Users_selected__HhKjL\",\"setUsersButton\":\"Users_setUsersButton__rIiPI\",\"paginator\":\"Users_paginator__3LXyl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1kHCk\",\"menu\":\"Navbar_menu__2F1R7\",\"activeLink\":\"Navbar_activeLink__3WQN3\"};","import React from 'react';\nimport s from './Footer.module.css'\n\nconst Footer = (props) => {\n    return (\n        <div className={s.footer}>\n            <div>\n                This site create by lex94 with love :)\n            </div>\n        </div>\n    )\n};\n\nexport default Footer;","import React from 'react';\n\n\nconst Background = (props) => {\n    return (\n        <div>\n\n        </div>\n    )\n};\n\nexport default Background ;","import { AppStateType } from './../reduxStore';\n\nexport const getUsersSelector = (state: AppStateType) => state.usersPage.users\nexport const getTotalUserCountSelector = (state: AppStateType) => state.usersPage.totalUsersCount\nexport const getPageSizeSelector = (state: AppStateType) => state.usersPage.pageSize\nexport const getIsLoadSelector = (state: AppStateType) => state.usersPage.isLoad\nexport const getCurrentPageSelector = (state: AppStateType) => state.usersPage.currentPage\nexport const getPortionSizeSelector = (state: AppStateType) => state.usersPage.portionSize\nexport const getCurrentPortionSelector = (state: AppStateType) => state.usersPage.currentPortion","import React, { useState } from 'react'\nimport { register } from '../../../serviceWorker'\nimport s from '../../Content/Users/Users.module.css'\n\ntype PropsTypes = {\n  totalItemsCount: number\n  pageSize: number\n  currentPage: number\n  portionSize: number\n  currentPortion: number\n\n  onPageChanged: (p: number) => void\n  setCurrentPortion: (newCurrentPortion: number) => void\n}\n\nconst Paginator: React.FC<PropsTypes>= ({ totalItemsCount, pageSize, currentPage, onPageChanged, currentPortion, portionSize, setCurrentPortion}) => {\n  let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n  let pages: Array<number> = []\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i)\n  }\n  \n  let portionCount = Math.ceil(pagesCount / portionSize)\n  let leftPart = (currentPortion -1) * portionSize\n  let rightPart = currentPortion * portionSize + 1\n\n  return (\n    <div className={s.paginator}>\n      <div className={s.prevButton}><button disabled={currentPortion <= 1} onClick={() => {\nsetCurrentPortion(currentPortion - 1)\n      }}>PREV</button></div>\n      <div className={s.pages}>\n        {pages.map(page => {\n          if (page > leftPart && page < rightPart) {\nreturn <span key={page} className={currentPage === page ? s.selected : ''} onClick={() => { onPageChanged(page)}}>{page} </span>\n          }\n        })}\n      </div>\n      <div className={s.nextButton}><button disabled={currentPortion === portionCount} onClick={() => {\nsetCurrentPortion(currentPortion + 1)\n      }}>NEXT</button></div>\n    </div>\n  )\n}\n\nexport default Paginator","import React from 'react'\nimport s from './Users.module.css'\nimport userPhoto from '../../../img/user.png'\nimport { NavLink } from 'react-router-dom'\nimport { UserType } from '../../../store/usersReducer'\n\nexport type UserPropsType = {\n  user: UserType\n\n  follow: (id: number) => void,\n  unfollow: (id: number) => void,\n}\n\nconst User: React.FC<UserPropsType> = (props) => {\n  return (\n    <>\n          <div className={s.userItem}>\n            <div className={s.avatarBlock}>\n              <div className={s.userAvatar}>\n                <NavLink to={'profile/' + props.user.id}>\n                  <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto} alt=\"avatar\" />\n                </NavLink>\n              </div>\n              <div className={s.followButton}>\n                {props.user.followed ? (\n                  <button\n                    onClick={() => {\n                      props.unfollow(props.user.id)\n                    }}\n                  >\n                    Remove\n                  </button>\n                ) : (\n                  <button\n                    onClick={() => {\n                      props.follow(props.user.id)\n                    }}\n                  >\n                    Add\n                  </button>\n                )}\n              </div>\n            </div>\n            <div className={s.infoBlock}>\n              <div className={s.name}>{props.user.name}</div>\n              <div className={s.status}>{props.user.status}</div>\n              <div className={s.location}>\n                {'u.location.city'}, {'u.location.country'}\n              </div>\n            </div>\n          </div>\n    </>\n  )\n}\n\nexport default User\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { follow, getUsers, setCurrentPage, unfollow, setCurrentPortion } from '../../../store/usersReducer'\nimport Preloader from '../../Common/Preloader/Preloader'\nimport { usersAPI } from '../../../api/api'\nimport { UserType } from '../../../store/usersReducer'\nimport { AppStateType } from '../../../store/reduxStore'\nimport {\n  getUsersSelector,\n  getTotalUserCountSelector,\n  getPageSizeSelector,\n  getIsLoadSelector,\n  getCurrentPageSelector,\n  getPortionSizeSelector,\n  getCurrentPortionSelector\n} from '../../../store/selectors/usersSelector'\nimport Paginator from '../../Common/Paginator/Paginator'\nimport User from './User'\n\ntype MapStatePropsType = {\n  users: Array<UserType>,\n  pageSize: number,\n  totalUsersCount: number,\n  currentPage: number,\n  usersAPI: any, //!!!!!!!Исправить\n  portionSize: number\n  currentPortion: number\n\n  isLoad: boolean,\n}\n\ntype MapDispatchPropsType = {\n  follow: (id: number) => void,\n  unfollow: (id: number) => void,\n  setCurrentPortion: (newCurrentPortion: number) => void\n\n  getUsers: (pageNumber: number, pageSize: number) => void,\n  setCurrentPage: (pageNumber: number) => void,\n}\n\ntype OwnPropsType = {}\n\nexport type PropsTypes = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nconst Users: React.FC<PropsTypes> = (props) => {\n  useEffect(() => {\n    props.getUsers(props.currentPage, props.pageSize)\n  }, [props.totalUsersCount])\n\n  const onPageChanged = (pageNumber: number) => {\n    props.getUsers(pageNumber, props.pageSize)\n    props.setCurrentPage(pageNumber)\n  }\n\n  return (\n    <> \n      {props.isLoad && <Preloader />}\n      <Paginator\n        onPageChanged={onPageChanged}\n        totalItemsCount={props.totalUsersCount}\n        pageSize={props.pageSize}\n        currentPage={props.currentPage}\n        currentPortion={props.currentPortion}\n        portionSize={props.portionSize}\n        setCurrentPortion={props.setCurrentPortion}\n      />\n      {props.users\n        .filter((u: any) => u.photos.small != null && u.photos.large != null)\n        .map((u) => (\n          <User key={u.id} user={u} follow={props.follow} unfollow={props.unfollow} />\n        ))}\n    </>\n  )\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    users: getUsersSelector(state),\n    pageSize: getPageSizeSelector(state),\n    totalUsersCount: getTotalUserCountSelector(state),\n    currentPage: getCurrentPageSelector(state),\n    isLoad: getIsLoadSelector(state),\n    portionSize: getPortionSizeSelector(state),\n    currentPortion: getCurrentPortionSelector(state),\n    usersAPI: usersAPI,\n  }\n}\n\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\n  follow,\n  unfollow,\n  setCurrentPage,\n  getUsers,\n  setCurrentPortion\n})(Users)\n","import React from 'react';\nimport s from \"../../Profile.module.css\";\n\n\nconst Avatar = (props) => {\n    return (\n        <div className={s.avatar}>\n            {/*<img src=\"https://pbs.twimg.com/profile_images/3033480309/2b618bfdb579a5f3bc5234dfb0599256.jpeg\" alt=\"avatar\"/>*/}\n            <img src={props.avatar} alt=\"avatar\"/>\n        </div>\n    )\n};\n\nexport default Avatar;","import React from 'react'\nimport s from '../Profile.module.css'\nimport Avatar from './Avatar/Avatar'\n\nconst AvatarBlock = (props) => {\n\n  const onChangePhoto = (e) => {\n      if (e.target.files.length) {\n          props.uploadUserPhoto(e.target.files[0])\n        }   \n  }\n\n  return (\n    <div>\n      <div className={s.avatar}>\n        <Avatar avatar={props.avatar} />\n      </div>\n      {props.isOwner && <input type={'file'} onChange={onChangePhoto} />}\n      <div className={s.name}>{props.name}</div>\n    </div>\n  )\n}\n\nexport default AvatarBlock\n","import React from 'react';\nimport s from \"../Profile.module.css\";\n\n\nconst PhotoBlock = (props) => {\n    return (\n        <div>\n            photo\n        </div>\n    )\n};\n\nexport default PhotoBlock;","import React from 'react';\nimport Avatar from \"../../AvatarBlock/Avatar/Avatar\";\nimport s from './Post.module.css'\n\n\nconst Post = (props) => {\n    return (\n        <div className={s.post}>\n            <div>\n                <Avatar avatar={props.avatar}/>\n            </div>\n            <div className={s.text}>\n                {props.postText}\n            </div>\n            <div>\n                Like: {props.likeCount}\n            </div>\n        </div>\n    )\n};\n\nexport default Post;","import React from 'react';\nimport s from \"../Profile.module.css\";\nimport Post from \"./Post/Post\";\n\nconst PostsBlock = (props) => {\n\n    let newPostText = React.createRef();\n\n    let addPost = () => {\n        props.addPost();\n    };\n\n    let onPostChange = () => {\n        let text = newPostText.current.value;\n        props.updateNewPostText(text);\n    };\n\n    let postData =\n        props.posts.map((p) => <Post key={p.id} id={p.id} postText={p.postText} likeCount={p.likeCount} avatar={props.avatar}/>);\n\n    return (\n        <div className={s.postBlock}>\n            <div className={s.textarea}>\n                <textarea name=\"addPost\"\n                          placeholder={\"How are you?\"}\n                          ref={newPostText}\n                          value={props.newPostText}\n                          onChange={onPostChange}\n                          className={s.postTextarea}\n                />\n                <div>\n                    <button onClick={addPost}>Add post</button>\n                </div>\n            </div>\n            <div>\n                {postData}\n            </div>\n        </div>\n    )\n};\n\nexport default PostsBlock;","import React, { useEffect, useState } from \"react\";\nimport s from \"../Profile.module.css\";\n\nconst ProfileBlock = (props) => {\n  const [editMode, setEditMode] = useState(false);\n  const [status, setStatus] = useState(props.status);\n\n  useEffect(() => {\n    setStatus(props.status);\n  }, [props.status]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    props.updateUserStatus(status);\n  };\n\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      <div className={s.status}>\n        {editMode ? (\n          <input\n            onChange={onStatusChange}\n            type=\"text\"\n            value={status}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n          />\n        ) : (\n          <div>\n            {props.status ? (\n              <span onClick={activateEditMode}>Status: {props.status}</span>\n            ) : (\n              <span>not status</span>  \n            )}\n          </div>\n        )}\n      </div>\n      <div className={s.profile}>About me: {props.profile}</div>\n    </div>\n  );\n};\n\nexport default ProfileBlock;\n","import React from 'react';\nimport s from \"../Profile.module.css\";\n\n\nconst ProfileImgBlock = (props) => {\n    return (\n        <div>\n            <img src=\"https://i.ibb.co/st5tL86/profile-Img.png\" alt=\"profile img\"/>\n        </div>\n    )\n};\n\nexport default ProfileImgBlock;","import React from 'react';\nimport s from \"../Profile.module.css\";\n\n\nconst ProjectsBlock = (props) => {\n    return (\n        <div>\n            <div>projects</div>\n        </div>\n    )\n};\n\nexport default ProjectsBlock;","import {profileAPI} from \"../api/api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./reduxStore\";\nimport { type } from \"node:os\";\n\nconst ADD_POST = 'profile/ADD_POST';\nconst DELETE_POST = \"profile/DELETE_POST\";\nconst UPDATE_NEW_POST_TEXT = \"profile/UPDATE_NEW_POST_TEXT\";\nconst SET_PROFILE = \"profile/SET_PROFILE\";\nconst SET_STATUS = \"profile/SET_STATUS\";\nconst SET_PHOTO = 'SET_PHOTO'\n\ntype InitialStateTypes = typeof initialState\n export type PostType = {\n    id: number\n    postText: string\n    likeCount: number\n}\nexport type UsersProfileType = {\n    id: number\n    position: string\n    responsibility: string\n    telephoneNumber: string\n    dateOfEmployment: string\n}\ntype ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\ntype PhotosType = {\n    small: string\n    large: string\n}\nexport type ProfileType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n}\n\nlet initialState = {\n    posts: [\n        {\n            id: 2,\n            postText: 'This is new social network! I made my social network, with blackjack and whores!',\n            likeCount: 5\n        },\n        {id: 1, postText: 'Hello world!', likeCount: 3}\n    ] as Array<PostType>,\n    usersProfile: [\n        {\n            id: 1,\n            position: 'Boss',\n            responsibility: 'front-end',\n            telephoneNumber: '+7-910-934-32-07',\n            dateOfEmployment: '22.02.2020'\n        }\n    ] as Array<UsersProfileType>,\n    newPostText: '',\n    profile: null as ProfileType | null,\n    status: null as string | null\n};\n\ntype ActionsTypes =\n  | AddPostType\n  | UpdateNewPostTest\n  | SetProfile\n  | SetUserStatus\n  | DeletePostType\n  | SetPhotoType\n\nconst profilePageReducer = (state = initialState, action: ActionsTypes): InitialStateTypes => {\n    switch (action.type) {\n        case ADD_POST: {\n            return {\n                ...state,\n                posts: [{id: 3, postText: state.newPostText, likeCount: 0}, ...state.posts],\n                newPostText: ''\n            };\n        }\n        case DELETE_POST: {\n            return {\n                ...state, posts: state.posts.filter(post => post.id !== action.postId)\n            }\n        }\n        case UPDATE_NEW_POST_TEXT:\n            return {...state, newPostText: action.newPostText};\n        case SET_PROFILE:\n            return {...state, profile: action.profile};\n        case SET_STATUS:\n            return {...state, status: action.status};\n        case SET_PHOTO: \n            return {...state, profile: {...state.profile, photos: action.photos} as any}\n        default:\n            return state;\n    }\n};\n\ntype AddPostType = {\n    type: typeof ADD_POST\n}\nexport const addPost = (): AddPostType => ({type: ADD_POST});\n\ntype DeletePostType = {\n    type: typeof DELETE_POST\n    postId: number\n}\n\nexport const deletePost = (postId: number): DeletePostType => ({type: DELETE_POST, postId}) \n\ntype UpdateNewPostTest = {\n    type: typeof UPDATE_NEW_POST_TEXT\n    newPostText: string\n}\n\nexport const updateNewPostText = (newPostText: string): UpdateNewPostTest => ({\n    type: UPDATE_NEW_POST_TEXT,\n    newPostText\n});\n\ntype SetProfile = {\n    type: typeof SET_PROFILE\n    profile: ProfileType\n}\nconst setProfile = (profile: ProfileType): SetProfile => ({type: SET_PROFILE, profile});\n\ntype SetUserStatus = {\n    type: typeof SET_STATUS\n    status: string\n}\nconst setUserStatus = (status: string): SetUserStatus => ({type: SET_STATUS, status});\n\ntype SetPhotoType = {\n    type: typeof SET_PHOTO\n    photos: PhotosType\n}\n\nconst setUserPhoto = (photos: PhotosType): SetPhotoType => ({type: SET_PHOTO, photos})\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\n\nexport const getProfile = (userId: number): ThunkType => async (dispatch) => {\nconst response = await profileAPI.getProfile(userId)\n    dispatch(setProfile(response))\n};\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\n    const response = await profileAPI.getStatus(userId)\n    dispatch(setUserStatus(response))\n};\n\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\n    const response = await profileAPI.updateStatus(status)\n    if (response.data.resultCode === 0) {\n        dispatch(setUserStatus(status))\n    }\n};\n\nexport const uploadUserPhoto = (photo: File): ThunkType => async (dispatch) => {\n    debugger\n    const response = await profileAPI.uploadPhoto(photo)\n    if (response.resultCode === 0) {\n        dispatch(setUserPhoto(response.data.photos) as any)\n    }\n};\n\nexport default profilePageReducer;","import React from 'react';\nimport s from './Profile.module.css'\nimport AvatarBlock from \"./AvatarBlock/AvatarBlock\";\nimport PhotoBlock from \"./PhotoBlock/PhotoBlock\";\nimport PostsBlock from \"./PostsBlock/PostsBlock\";\nimport ProfileBlock from \"./ProfileBlock/ProfileBlock\";\nimport ProfileImgBlock from \"./ProfileImgBlock/ProfileImgBlock\";\nimport ProjectsBlock from \"./ProjectBlock/ProjectsBlock\";\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport {updateUserStatus} from \"../../../store/profilePageReducer\";\n\nconst Profile = (props) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div className={s.profilePage}>\n            <div className={s.profileImgBlock}>\n                <ProfileImgBlock/>\n            </div>\n            <div className={s.avatarBlock + ' ' + s.block}>\n                <AvatarBlock avatar={props.profile.photos.large} name={props.profile.fullName} isOwner={props.isOwner} uploadUserPhoto={props.uploadUserPhoto}/>\n            </div>\n            <div className={s.profileBlock + ' ' + s.block}>\n                <ProfileBlock profile={props.profile.aboutMe} status={props.status} updateUserStatus={props.updateUserStatus}/>\n            </div>\n            <div className={s.projectsBlock + ' ' + s.block}>\n                <ProjectsBlock/>\n            </div>\n            <div className={s.photoBlock + ' ' + s.block}>\n                <PhotoBlock/>\n            </div>\n            <div className={s.postsBlock + ' ' + s.block}>\n                <PostsBlock addPost={props.addPost} updateNewPostText={props.updateNewPostText} posts={props.posts}\n                            newPostText={props.newPostText}\n                            avatar={props.profile.photos.large}/>\n            </div>\n        </div>\n    )\n};\n\nexport default Profile;","import React from 'react'\nimport Profile from './Profile'\nimport { connect } from 'react-redux'\nimport {\n  addPost,\n  getProfile,\n  getUserStatus,\n  updateNewPostText,\n  updateUserStatus,\n  uploadUserPhoto,\n} from '../../../store/profilePageReducer'\nimport { Redirect, withRouter } from 'react-router-dom'\nimport { profileAPI } from '../../../api/api'\nimport { withRedirect } from '../../../utils/HOCs'\nimport { compose } from 'redux'\nimport { PostType, ProfileType } from '../../../store/profilePageReducer'\nimport { AppStateType } from '../../../store/reduxStore'\n\ntype MapStatePropsType = {\n  posts: Array<PostType>,\n  newPostText: string | null,\n  profile: ProfileType | null,\n  status: string | null,\n  profileAPI: any, //Исправить!!!\n  defaultId: number | null,\n}\n\ntype MapDispatchPropsType = {\n  getProfile: (userId: number) => void,\n  addPost: () => void,\n  updateNewPostText: () => void,\n  getUserStatus: (userId: number) => void,\n  updateUserStatus: () => void,\n  uploadUserPhoto: (photo: File) => void,\n}\n\ntype OwnPropsType = {\n  match: any,\n}\n\ntype PropsType = MapDispatchPropsType & MapStatePropsType & OwnPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n  refreshData() {\n    let userId = this.props.match.params.userId\n    if (!userId) {\n      userId = this.props.defaultId\n      if (!userId) {\n        return <Redirect to=\"/login\" />\n      }\n    }\n    this.props.getProfile(userId)\n    this.props.getUserStatus(userId)\n  }\n\n  componentDidMount() {\n    this.refreshData()\n  }\n  componentDidUpdate(prevProps: PropsType) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshData()\n    }\n  }\n\n  render() {\n    return (\n      <Profile {...this.props} isOwner={!this.props.match.params.userId} uploadUserPhoto={this.props.uploadUserPhoto} />\n    )\n  }\n}\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    profileAPI: profileAPI,\n    defaultId: state.auth.id,\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, {\n    getProfile,\n    addPost,\n    updateNewPostText,\n    getUserStatus,\n    updateUserStatus,\n    uploadUserPhoto,\n  }),\n  withRouter,\n  withRedirect\n)(ProfileContainer)\n","import React from \"react\";\nimport s from \"./Header.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Header = (props) => {\n  return (\n    <header className={s.header}>\n      <div className={s.logo}>\n        <img src=\"https://i.ibb.co/Hx4qhXZ/VR-Group-logo-svg.png\" alt=\"logo\" />\n        <span>VReacte</span>\n      </div>\n      <div className={s.auth}>\n        {props.isLogin ? (\n          <div onClick={props.deleteAuthUserData}>{props.login}</div>\n        ) : (\n          <NavLink to=\"/login\">please login</NavLink>\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport { connect } from \"react-redux\";\nimport { deleteAuthUserData } from \"../../store/authReducer\";\nimport { authAPI } from \"../../api/api\";\n\nclass HeaderContainer extends React.Component {\n  render() {\n    return <Header {...this.props} />;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    login: state.auth.login,\n    isLogin: state.auth.isLogin,\n  };\n};\n\nexport default connect(mapStateToProps, { deleteAuthUserData })(\n  HeaderContainer\n);\n","import React from 'react'\nimport s from './Navbar.module.css'\nimport { NavLink } from 'react-router-dom'\n\nconst Sidebar = (props) => {\n  return (\n    <nav className={s.navbar}>\n      <div className={s.background}></div>\n      <div className={s.menu}>\n        <div>\n          <NavLink to={'/profile/'} activeClassName={s.activeLink}>\n            Profile\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>\n            Messages\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/news\" activeClassName={s.activeLink}>\n            News\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/music\" activeClassName={s.activeLink}>\n            Music\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/settings\" activeClassName={s.activeLink}>\n            Settings\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/users\" activeClassName={s.activeLink}>\n            Users\n          </NavLink>\n        </div>\n        <br />\n        <div>\n          <NavLink to=\"/friends\" activeClassName={s.activeLink}>\n            Friends\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Sidebar\n","import { getMe } from \"./authReducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./reduxStore\";\n\nconst INITIALIZED_SUCCESS = \"app/INITIALIZED_SUCCESS\";\n\ntype InitialStateType = typeof initialState;\n\ntype ActionsTypes = InitializedSuccessTypes;\n\nlet initialState = {\n  isInitialized: false,\n};\n\nconst appReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return {\n        ...state,\n        isInitialized: true,\n      };\n    default:\n      return state;\n  }\n};\n\ntype InitializedSuccessTypes = {\n  type: typeof INITIALIZED_SUCCESS;\n};\n\nconst initializedSuccess = (): InitializedSuccessTypes => ({\n  type: INITIALIZED_SUCCESS,\n});\n\ntype ThunkType = ThunkAction<\n  Promise<void>,\n  AppStateType,\n  unknown,\n  ActionsTypes\n>;\n\nexport const initialApp = () => (dispatch: any) => {\n  dispatch(getMe()).then(() => {\n    dispatch(initializedSuccess());\n  });\n};\n\nexport default appReducer;\n","import React from 'react'\nimport './App.css'\nimport Footer from './Components/Footer/Footer'\nimport Background from './Components/Background'\nimport { Route, Redirect } from 'react-router-dom'\nimport Users from './Components/Content/Users/Users'\nimport ProfileContainer from './Components/Content/Profile/ProfileContainer'\nimport HeaderContainer from './Components/Header/HeaderContainer'\nimport Sidebar from './Components/Sidebar/Sidebar'\nimport { connect } from 'react-redux'\nimport Preloader from './Components/Common/Preloader/Preloader'\nimport { initialApp } from './store/appReducer'\nimport { WithSuspense } from './utils/HOCs'\n\nconst DialogsContainer = React.lazy(() => import('./Components/Content/Dialogs/DialogsContainer'))\nconst FriendsContainer = React.lazy(() => import('./Components/Content/Friends/FriendsContainer'))\nconst LoginContainer = React.lazy(() => import('./Components/Login/Login'))\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.initialApp()\n  }\n\n  render() {\n    if (!this.props.isInitialized) return <Preloader />\n\n    return (\n      <div className=\"app\">\n        <HeaderContainer />\n        <Sidebar />\n        <div className=\"content\">\n          <Route exact path=\"/\" render={() => <Redirect to={'/profile'} />} />\n          <Route path=\"/profile/:userId?\" render={() => <ProfileContainer />} />\n          <Route path=\"/dialogs\" render={WithSuspense(DialogsContainer)} />\n          <Route path=\"/users\" render={() => <Users />} />\n          <Route path=\"/friends\" render={WithSuspense(FriendsContainer)} />\n          <Route path=\"/login\" render={WithSuspense(LoginContainer)} />\n        </div>\n        <div className=\"background\">\n          <Background />\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nconst MepStateToProps = (state) => ({\n  isInitialized: state.app.isInitialized,\n})\n\nexport default connect(MepStateToProps, { initialApp })(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","type InitialStateType = typeof initialState\n\ntype ImpotantFriendsType = {\n    id: number\n    name: string\n    avatar: string\n}\n\ntype ActionsTypes = {}\n\nlet initialState = {\n    navBar: [\n        {id: 1, name: 'Pashok', avatar: 'https://i.ibb.co/HxhbGXP/Zoidberg-rev.jpg'},\n        {id: 2, name: 'Polina', avatar: 'https://i.ibb.co/bQdMS9z/Amy-rev.jpg'},\n        {id: 3, name: 'Vovan', avatar: 'https://i.ibb.co/0BRBtWB/unnamed.gif'}\n    ] as Array<ImpotantFriendsType>\n};\n\nconst navBarReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\nreturn state;\n};\n\nexport default navBarReducer;","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport profilePageReducer from \"./profilePageReducer\";\nimport dialogsPageReducer from \"./dialogsPageReducer\";\nimport navBarReducer from \"./navBarReducer\";\nimport usersReducer from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { reducer as formReducer } from \"redux-form\";\nimport appReducer from \"./appReducer\";\n\nlet rootReducer = combineReducers({\n  profilePage: profilePageReducer,\n  dialogsPage: dialogsPageReducer,\n  navBar: navBarReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  form: formReducer,\n  app: appReducer,\n});\n\ntype rootReducerType = typeof rootReducer;\nexport type AppStateType = ReturnType<rootReducerType>;\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n// @ts-ignore\nwindow.store = store.getState();\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport store from \"./store/reduxStore\";\nimport {Provider} from \"react-redux\";\n\nlet rerenderEntireTree = (state) => {\n    ReactDOM.render(<HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>, document.getElementById('root'));\n};\n\nrerenderEntireTree(store.getState());\n\nstore.subscribe( () => {\n    let state = store.getState();\n    rerenderEntireTree(state)\n    }\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default __webpack_public_path__ + \"static/media/preloader.5342aab4.svg\";","import React from 'react';\nimport preloader from \"../../../img/effects/preloader.svg\";\n\n\nconst Preloader = () => <div id=\"preloaderImg\"><img src={preloader} alt=\"load\"/></div>;\n\nexport default Preloader;","export const updateObjectInArray = (items: any, objPropName: string, itemsId: number, newObjProps: any) => {\n  return items.map((item: any) => {\n    if (item[objPropName] === itemsId) {\n      return { ...item, ...newObjProps }\n    }\n    return item\n  })\n}\n","import { usersAPI } from \"./../api/api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./reduxStore\";\nimport { updateObjectInArray } from \"../utils/helper\";\n\nconst FOLLOW = \"users/FOLLOW\";\nconst UNFOLLOW = \"users/UNFOLLOW\";\nconst SET_USERS = \"users/SET_USERS\";\nconst SET_CURRENT_PAGE = \"users/SET_CURRENT_PAGE\";\nconst SET_USERS_TOTAL_COUNT = \"users/SET_USERS_TOTAL_COUNT\";\nconst TOGGLE_ISLOAD = \"users/TOGGLE_ISLOAD\";\nconst SET_CURRENT_PORTION = 'SET_CURRENT_PORTION'\n\nexport type InitialStateType = typeof initialState;\n\ntype PhotosType = {\n  small: string;\n  large: string;\n};\n\nexport type UserType = {\n  id: number;\n  name: string;\n  status: string;\n  photos: PhotosType;\n  followed: boolean;\n};\n\nlet initialState = {\n  users: [] as Array<UserType>,\n  pageSize: 100,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isLoad: false,\n  portionSize: 20,\n  currentPortion: 1\n};\n\ntype ActionsTypes =\n  | FollowSuccessActionType\n  | UnfollowSuccessActionType\n  | SetUsersActionType\n  | SetCurrentPage\n  | SetUsersTotalCount\n  | ToggleIsLoad\n  | SetCurrentPortion\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, 'id', action.userId, {followed: true})\n      };\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, 'id', action.userId, {followed: false})\n      };\n    case SET_USERS:\n      return { ...state, users: action.users };\n    case SET_CURRENT_PAGE:\n      return { ...state, currentPage: action.currentPage, users: [] };\n    case SET_USERS_TOTAL_COUNT:\n      return { ...state, totalUsersCount: action.totalUsersCount };\n    case TOGGLE_ISLOAD:\n      return { ...state, isLoad: action.isLoad };\n      case SET_CURRENT_PORTION:\n        return {\n          ...state, currentPortion: action.newCurrentPortion\n        }\n    default:\n      return state;\n  }\n};\n\ntype FollowSuccessActionType = {\n  type: typeof FOLLOW;\n  userId: number;\n};\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({\n  type: FOLLOW,\n  userId,\n});\n\ntype UnfollowSuccessActionType = {\n  type: typeof UNFOLLOW;\n  userId: number;\n};\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({\n  type: UNFOLLOW,\n  userId,\n});\n\ntype SetUsersActionType = {\n  type: typeof SET_USERS;\n  users: any;\n};\nexport const setUsers = (users: any): SetUsersActionType => ({\n  type: SET_USERS,\n  users,\n});\n\ntype SetCurrentPage = {\n  type: typeof SET_CURRENT_PAGE;\n  currentPage: number;\n};\nexport const setCurrentPage = (currentPage: number): SetCurrentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage,\n});\n\ntype SetUsersTotalCount = {\n  type: typeof SET_USERS_TOTAL_COUNT;\n  totalUsersCount: number;\n};\nexport const setUsersTotalCount = (totalUsersCount: number): SetUsersTotalCount => ({\n  type: SET_USERS_TOTAL_COUNT,\n  totalUsersCount,\n});\n\ntype ToggleIsLoad = {\n  type: typeof TOGGLE_ISLOAD;\n  isLoad: boolean;\n};\nexport const toggleIsLoad = (isLoad: boolean): ToggleIsLoad => ({\n  type: TOGGLE_ISLOAD,\n  isLoad,\n});\n\ntype SetCurrentPortion = {\n  type: typeof SET_CURRENT_PORTION\n  newCurrentPortion: number\n}\n\nexport const setCurrentPortion = (newCurrentPortion: number): SetCurrentPortion => ({type: SET_CURRENT_PORTION, newCurrentPortion}) \n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\n\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\n  dispatch(toggleIsLoad(true));\n  const response = await usersAPI.getUsers(currentPage, pageSize);\n  dispatch(toggleIsLoad(false));\n  dispatch(setUsers(response.items));\n  dispatch(setUsersTotalCount(response.totalCount));\n};\n\nconst followUnfollowCommonPart = async (\n  apiMethod: (userId: number) => Promise<any>,\n  action: FollowSuccessActionType | UnfollowSuccessActionType,\n  dispatch: any,\n  userId: number\n) => {\n  const response = await apiMethod(userId);\n  if (response.resultCode === 0) {\n    dispatch(action);\n  }\n};\n\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\n  followUnfollowCommonPart(usersAPI.follow.bind(usersAPI), followSuccess(userId), dispatch, userId);\n};\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\n  followUnfollowCommonPart(usersAPI.unfollow.bind(usersAPI), unfollowSuccess(userId), dispatch, userId);\n};\n\nexport default usersReducer;\n","import { authAPI } from \"../api/api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./reduxStore\";\nimport { stopSubmit } from \"redux-form\";\nimport { SubmiteAuthDataTypes } from \"../common/types/types\";\n\nconst SET_AUTH_USER_DATA = \"auth/SET_AUTH_USER_DATA\";\nconst SET_CAPTCHA_URL = \"auth/SET_CAPTCHA_URL\";\n\ntype InitialStateType = typeof initialState;\n\nlet initialState = {\n  id: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isLogin: false,\n  captchaUrl: null as string | null,\n};\n\ntype ActionsTypes = SetUserData | SetCaptchaUrlType;\n\nconst authReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return {\n        ...state,\n        ...action.data,\n        isLogin: action.isLogin,\n      };\n    case SET_CAPTCHA_URL:\n      return {\n        ...state,\n        captchaUrl: action.captchaUrl,\n      };\n    default:\n      return state;\n  }\n};\n\ntype SetUserDataPayload = {\n  id: number | null;\n  login: string | null;\n  email: string | null;\n};\ntype SetUserData = {\n  type: typeof SET_AUTH_USER_DATA;\n  data: SetUserDataPayload;\n  isLogin: boolean;\n};\n\nconst setUserData = (\n  data: SetUserDataPayload,\n  isLogin: boolean\n): SetUserData => ({\n  type: SET_AUTH_USER_DATA,\n  data,\n  isLogin,\n});\n\ntype SetCaptchaUrlType = {\n  type: typeof SET_CAPTCHA_URL;\n  captchaUrl: string;\n};\n\nconst setCaptchaUrl = (captchaUrl: string): SetCaptchaUrlType => ({\n  type: SET_CAPTCHA_URL,\n  captchaUrl,\n});\n\ntype ThunkType = ThunkAction<\n  Promise<void>,\n  AppStateType,\n  unknown,\n  ActionsTypes\n>;\n\nexport const getMe = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.getMe();\n  if (response.resultCode === 0) {\n    dispatch(setUserData(response.data, true));\n  } else {\n    dispatch(setUserData({ id: null, login: null, email: null }, false));\n  }\n};\n\nexport const sendAuthUserData = (\n  data: SubmiteAuthDataTypes\n): ThunkType => async (dispatch) => {\n  const response = await authAPI.login(data);\n  const errorText =\n    response.messages.length > 0 ? response.messages[0] : \"Some Error\";\n  if (response.resultCode === 0) {\n    dispatch(getMe());\n  } else if (response.resultCode === 1) {\n    dispatch(stopSubmit(\"login\", { _error: errorText }) as any); // Исправить\n  } else if (response.resultCode === 10) {\n    const captchaUrl = await authAPI.getCaptchaUrl();\n    dispatch(setCaptchaUrl(captchaUrl.url));\n  }\n};\n\nexport const deleteAuthUserData = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.logout();\n  if (response.resultCode === 0) {\n    dispatch(getMe());\n  }\n};\n\nexport default authReducer;\n","import React, { Suspense } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport s from '../Components/Common/FormsControls/FormsControl.module.css'\nimport Preloader from '../Components/Common/Preloader/Preloader'\n\nconst mapStateToPropsForRedirect = (state) => {\n  return {\n    isLogin: state.auth.isLogin,\n  }\n}\n\nexport const withRedirect = (Component) => {\n  const createRedirectContainerComponent = (props) => {\n    if (!props.isLogin) {\n      return <Redirect to={'/login'} />\n    }\n    return <Component {...props} />\n  }\n  return connect(mapStateToPropsForRedirect)(createRedirectContainerComponent)\n}\n\nexport const withTag = (Element) => ({ input, meta, ...props }) => {\n  const hasError = meta.touched && meta.error\n  return (\n    <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\n      <Element {...input} {...props} />\n      {hasError && <span> {meta.error} </span>}\n    </div>\n  )\n}\n\nexport const WithSuspense = (Component) => () => {\n  return (\n    <Suspense fallback={<Preloader />}>\n      <Component />\n    </Suspense>\n  )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePage\":\"Profile_profilePage__F-bi9\",\"profileImgBlock\":\"Profile_profileImgBlock__28v2T\",\"avatarBlock\":\"Profile_avatarBlock__17wuG\",\"avatar\":\"Profile_avatar__35jdq\",\"profileBlock\":\"Profile_profileBlock__2MyBW\",\"projectsBlock\":\"Profile_projectsBlock__31E9L\",\"photoBlock\":\"Profile_photoBlock__3LVV_\",\"postsBlock\":\"Profile_postsBlock__31xi2\",\"textarea\":\"Profile_textarea__2YHwN\",\"block\":\"Profile_block__1631X\",\"name\":\"Profile_name__1oLAi\",\"postTextarea\":\"Profile_postTextarea__3Ct1I\",\"profileInfo\":\"Profile_profileInfo__2ZnTm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1CGKd\",\"logo\":\"Header_logo__ffv_d\",\"auth\":\"Header_auth__2BNLo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__11g5d\",\"error\":\"FormsControl_error__1uqcA\",\"redText\":\"FormsControl_redText__2dzox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1x1up\",\"text\":\"Post_text__1RXiU\"};","export default __webpack_public_path__ + \"static/media/user.c9034bb5.png\";","const SEND_MESSAGE = 'dialog/SEND-MESSAGE';\nconst UPDATE_NEW_MESSAGE_TEXT = \"dialog/UPDATE-NEW-MESSAGE-TEXT\";\n\ntype InitialStateType = typeof initialState\ntype DialogType = {\n    id: number\n    name: string\n    avatar: string\n}\ntype MessageType = {\n    id: number\n    message: string\n}\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: 'Pashok', avatar: 'https://i.ibb.co/HxhbGXP/Zoidberg-rev.jpg'},\n        {id: 2, name: 'Polina', avatar: 'https://i.ibb.co/bQdMS9z/Amy-rev.jpg'},\n        {id: 3, name: 'Vovan', avatar: 'https://i.ibb.co/0BRBtWB/unnamed.gif'}\n    ] as Array<DialogType>,\n        messages: [\n    {id: 1, message: 'i am kachok'},\n    {id: 2, message: 'ti gde?'},\n    {id: 3, message: 'Poidem buhat`?'}\n] as Array<MessageType>,\n    newMessageText: ''\n};\n\ntype ActionsTypes = SendMessage | UpdateNewMessageText\n\nconst dialogsPageReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    let stateCopy;\n    switch (action.type) {\n        case SEND_MESSAGE:\n            let newMessage = state.newMessageText;\n            stateCopy = {...state,\n                messages: [...state.messages, {id:4, message: newMessage}],\n                newMessageText: ''\n            };\n            return stateCopy;\n        case UPDATE_NEW_MESSAGE_TEXT:\n            stateCopy = {...state,\n            newMessageText: action.newMessageText\n            };\n            return stateCopy;\n        default:\n            return state;\n    }\n};\n\ntype SendMessage = {\n    type: typeof SEND_MESSAGE\n}\ntype UpdateNewMessageText = {\n    type: typeof UPDATE_NEW_MESSAGE_TEXT\n    newMessageText: string\n}\n\nexport const sendMessage = (): SendMessage => ({type: SEND_MESSAGE});\nexport const updateNewMessageText = (text: string): UpdateNewMessageText => ({type: UPDATE_NEW_MESSAGE_TEXT, newMessageText: text});\n\nexport default dialogsPageReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3kRR3\"};","import axios from 'axios'\nimport { SubmiteAuthDataTypes } from '../common/types/types'\n\nconst instance = axios.create({\n  withCredentials: true,\n  headers: { 'API-KEY': 'ca78cc0b-4b4d-4a86-9c5b-ca3e19ff60be' },\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n})\n\nexport const usersAPI = {\n  getUsers(currentPage: number, pageSize: number) {\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`).then((response) => response.data)\n  },\n  follow(userId: number) {\n    return instance.post(`follow/${userId}`, {}).then((response) => response.data)\n  },\n  unfollow(userId: number) {\n    return instance.delete(`follow/${userId}`).then((response) => response.data)\n  },\n}\n\nexport const profileAPI = {\n  getProfile(userId: number) {\n    return instance.get(`profile/${userId}`).then((response) => response.data)\n  },\n  getStatus(userId: number) {\n    return instance.get(`/profile/status/${userId}`).then((response) => response.data)\n  },\n  updateStatus(status: string) {\n    return instance.put(`/profile/status`, { status })\n  },\n  uploadPhoto(photo: File) {\n    const formData = new FormData()\n    formData.append('image', photo)\n    return instance\n      .put('/profile/photo', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      .then((res) => res.data)\n  },\n}\n\ntype MeResponseTypes = {\n  data: { id: number, email: string, login: string },\n  resultCode: number,\n  messages: Array<string>,\n}\n\ntype LoginType = {\n  resultCode: number,\n  messages: Array<string>,\n  data: { userId: number },\n}\n\ntype CaptchaType = {\n  url: string,\n}\n\nexport const authAPI = {\n  getMe() {\n    return instance.get<MeResponseTypes>('auth/me').then((res) => res.data)\n  },\n  login(data: SubmiteAuthDataTypes) {\n    return instance\n      .post<LoginType>('auth/login', { ...data })\n      .then((res) => res.data)\n  },\n  logout() {\n    return instance.delete('auth/login').then((res) => res.data)\n  },\n  getCaptchaUrl() {\n    return instance.get<CaptchaType>('/security/get-captcha-url').then((res) => res.data)\n  },\n}\n"],"sourceRoot":""}