{"version":3,"sources":["img/user.png","api/api.ts","store/dialogsPageReducer.ts","Components/Footer/Footer.module.css","Components/Content/Users/Users.module.css","Components/Sidebar/Navbar.module.css","Components/Common/FormsControls/FormsControls.tsx","Components/Footer/Footer.jsx","Components/Background.jsx","store/selectors/usersSelector.ts","Components/Common/Paginator/Paginator.tsx","Components/Content/Users/User.tsx","Components/Content/Users/Users.tsx","Components/Content/Profile/AvatarBlock/Avatar/Avatar.jsx","Components/Content/Profile/AvatarBlock/AvatarBlock.jsx","Components/Content/Profile/PhotoBlock/PhotoBlock.jsx","Components/Content/Profile/PostsBlock/Post/Post.jsx","Components/Content/Profile/PostsBlock/PostsBlock.jsx","Components/Content/Profile/ProfileBlock/ProfileData.tsx","Components/Content/Profile/ProfileBlock/ProfileFormData.tsx","Components/Content/Profile/ProfileBlock/ProfileBlock.tsx","Components/Content/Profile/ProfileImgBlock/ProfileImgBlock.jsx","Components/Content/Profile/ProjectBlock/ProjectsBlock.jsx","Components/Content/Profile/Profile.jsx","store/profilePageReducer.ts","Components/Content/Profile/ProfileContainer.tsx","Components/Header/Header.jsx","Components/Header/HeaderContainer.jsx","Components/Sidebar/Sidebar.jsx","store/appReducer.ts","App.js","serviceWorker.js","store/navBarReducer.ts","store/reduxStore.ts","index.js","img/effects/preloader.svg","Components/Common/Preloader/Preloader.jsx","utils/helper.ts","store/usersReducer.ts","store/authReducer.ts","utils/HOCs.js","Components/Common/FormsControls/FormsControl.module.css","Components/Content/Profile/Profile.module.css","Components/Header/Header.module.css","Components/Content/Profile/PostsBlock/Post/Post.module.css"],"names":["instance","axios","create","withCredentials","headers","baseURL","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","uploadPhoto","photo","formData","FormData","append","res","updateProfile","authAPI","getMe","login","logout","getCaptchaUrl","SEND_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","initialState","dialogs","id","name","avatar","messages","message","newMessageText","sendMessage","type","updateNewMessageText","text","dialogsPageReducer","state","action","newMessage","module","exports","InputWithComment","input","meta","props","hasError","touched","error","className","style","redText","createField","placeholder","component","validate","value","Footer","s","footer","Background","getUsersSelector","usersPage","users","getTotalUserCountSelector","totalUsersCount","getPageSizeSelector","getIsLoadSelector","isLoad","getCurrentPageSelector","getPortionSizeSelector","portionSize","getCurrentPortionSelector","currentPortion","Paginator","totalItemsCount","onPageChanged","setCurrentPortion","pagesCount","Math","ceil","pages","i","push","portionCount","leftPart","rightPart","paginator","prevButton","disabled","onClick","map","page","selected","nextButton","User","userItem","avatarBlock","userAvatar","to","user","src","photos","small","userPhoto","alt","followButton","followed","infoBlock","location","connect","setCurrentPage","useEffect","Preloader","pageNumber","filter","u","large","Avatar","AvatarBlock","isOwner","onChange","e","target","files","length","uploadUserPhoto","PhotoBlock","Post","postText","likeCount","PostsBlock","newPostText","React","createRef","postData","posts","p","postBlock","textarea","ref","current","updateNewPostText","postTextarea","addPost","ProfileData","profile","updateUserStatus","setEditProfileMode","useState","editMode","setEditMode","localStatus","setStatus","getContacts","Object","entries","contacts","item","currentTarget","autoFocus","onBlur","aboutMe","lookingForAJob","lookingForAJobDescription","some","reduxForm","form","inputNames","onSubmit","handleSubmit","contactsKey","Field","ProfileBlock","editProfileMode","keys","console","log","ProfileImgBlock","ProjectsBlock","Profile","profilePage","profileImgBlock","block","fullName","profileBlock","projectsBlock","photoBlock","postsBlock","ADD_POST","DELETE_POST","UPDATE_NEW_POST_TEXT","SET_PROFILE","SET_STATUS","SET_PHOTO","usersProfile","position","responsibility","telephoneNumber","dateOfEmployment","setUserStatus","dispatch","a","profilePageReducer","postId","ProfileContainer","this","match","params","defaultId","getUserStatus","refreshData","prevProps","Component","compose","auth","resultCode","requestData","AboutMe","FullName","github","facebook","instagram","vk","twitter","website","youtube","mainLink","withRouter","withRedirect","Header","header","logo","isLogin","deleteAuthUserData","HeaderContainer","Sidebar","navbar","background","menu","activeClassName","activeLink","INITIALIZED_SUCCESS","isInitialized","appReducer","DialogsContainer","lazy","FriendsContainer","LoginContainer","App","initialApp","exact","path","render","WithSuspense","app","Boolean","window","hostname","navBar","navBarReducer","rootReducer","combineReducers","dialogsPage","usersReducer","authReducer","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","getState","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","preloader","updateObjectInArray","items","objPropName","itemsId","newObjProps","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_TOTAL_COUNT","TOGGLE_ISLOAD","SET_CURRENT_PORTION","followSuccess","unfollowSuccess","setUsers","toggleIsLoad","newCurrentPortion","totalCount","followUnfollowCommonPart","apiMethod","bind","SET_AUTH_USER_DATA","SET_CAPTCHA_URL","email","captchaUrl","setUserData","setCaptchaUrl","sendAuthUserData","errorText","stopSubmit","_error","url","mapStateToPropsForRedirect","fallback"],"mappings":"4GAAe,QAA0B,kC,0JCGnCA,E,OAAWC,EAAMC,OAAO,CAC5BC,iBAAiB,EACjBC,QAAS,CAAE,UAAW,wCACtBC,QAAS,kDAGEC,EAAW,CACtBC,SADsB,SACbC,EAAqBC,GAC5B,OAAOT,EAASU,IAAT,qBAA2BF,EAA3B,kBAAgDC,IAAYE,MAAK,SAACC,GAAD,OAAcA,EAASC,SAEjGC,OAJsB,SAIfC,GACL,OAAOf,EAASgB,KAAT,iBAAwBD,GAAU,IAAIJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE3EI,SAPsB,SAObF,GACP,OAAOf,EAASkB,OAAT,iBAA0BH,IAAUJ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAI9DM,EAAa,CACxBC,WADwB,SACbL,GACT,OAAOf,EAASU,IAAT,kBAAwBK,IAAUJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAEvEQ,UAJwB,SAIdN,GACR,OAAOf,EAASU,IAAT,0BAAgCK,IAAUJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAE/ES,aAPwB,SAOXC,GACX,OAAOvB,EAASwB,IAAT,kBAAgC,CAAED,YAE3CE,YAVwB,SAUZC,GACV,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClB1B,EACJwB,IAAI,iBAAkBG,EAAU,CAC/BvB,QAAS,CACP,eAAgB,yBAGnBO,MAAK,SAACmB,GAAD,OAASA,EAAIjB,SAEvBkB,cArBwB,SAqBVlB,GACZ,OAAOb,EAASwB,IAAI,WAAYX,GAAMF,MAAK,SAACmB,GAAD,OAASA,EAAIjB,UAoB/CmB,EAAU,CACrBC,MADqB,WAEnB,OAAOjC,EAASU,IAAqB,WAAWC,MAAK,SAACmB,GAAD,OAASA,EAAIjB,SAEpEqB,MAJqB,SAIfrB,GACJ,OAAOb,EACJgB,KAAgB,aADZ,eAC+BH,IACnCF,MAAK,SAACmB,GAAD,OAASA,EAAIjB,SAEvBsB,OATqB,WAUnB,OAAOnC,EAASkB,OAAO,cAAcP,MAAK,SAACmB,GAAD,OAASA,EAAIjB,SAEzDuB,cAZqB,WAanB,OAAOpC,EAASU,IAAiB,6BAA6BC,MAAK,SAACmB,GAAD,OAASA,EAAIjB,W,wHC5E9EwB,EAAe,sBACfC,EAA0B,iCAa5BC,EAAe,CACfC,QAAS,CACL,CAACC,GAAI,EAAGC,KAAM,SAAUC,OAAQ,6CAChC,CAACF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,wCAChC,CAACF,GAAI,EAAGC,KAAM,QAASC,OAAQ,yCAE/BC,SAAU,CACd,CAACH,GAAI,EAAGI,QAAS,eACjB,CAACJ,GAAI,EAAGI,QAAS,WACjB,CAACJ,GAAI,EAAGI,QAAS,mBAEjBC,eAAgB,IAiCPC,EAAc,iBAAoB,CAACC,KAAMX,IACzCY,EAAuB,SAACC,GAAD,MAAyC,CAACF,KAAMV,EAAyBQ,eAAgBI,IAE9GC,IA/BY,WAAmE,IAAlEC,EAAiE,uDAAzDb,EAAcc,EAA2C,uCAEzF,OAAQA,EAAOL,MACX,KAAKX,EACD,IAAIiB,EAAaF,EAAMN,eAKvB,OAJS,2BAAOM,GAAP,IACLR,SAAS,GAAD,mBAAMQ,EAAMR,UAAZ,CAAsB,CAACH,GAAG,EAAGI,QAASS,KAC9CR,eAAgB,KAGxB,KAAKR,EAID,OAHS,2BAAOc,GAAP,IACTN,eAAgBO,EAAOP,iBAG3B,QACI,OAAOM,K,oBC7CnBG,EAAOC,QAAU,CAAC,OAAS,yB,+DCA3BD,EAAOC,QAAU,CAAC,SAAW,wBAAwB,eAAiB,8BAA8B,UAAY,2B,mBCAhHD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,WAAa,6B,8JCI9EC,EAAmB,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAASC,EAAiB,gCAC5DC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OACE,gCACE,8BACE,6DAAWL,GAAWE,GAAtB,IAA6BI,UAAWH,EAAWI,IAAMF,MAAQ,QAEnE,8BAAMF,GAAY,sBAAMG,UAAWC,IAAMC,QAAvB,SAAiCP,EAAKI,cAKjDI,EAAc,SACzBC,EACA1B,EACA2B,EACAC,GAGI,IAFJV,EAEG,uDAFU,GACbW,EACG,uDADK,GAER,OACE,qCACE,cAAC,IAAD,aAAOH,YAAaA,EAAa1B,KAAMA,EAAM2B,UAAWA,EAAWC,SAAUA,GAAcV,IAC1FW,O,wJCfQC,EAVA,SAACZ,GACZ,OACI,qBAAKI,UAAWS,IAAEC,OAAlB,SACI,4ECKGC,EARI,SAACf,GAChB,OACI,yB,wCCHKgB,EAAmB,SAACxB,GAAD,OAAyBA,EAAMyB,UAAUC,OAC5DC,EAA4B,SAAC3B,GAAD,OAAyBA,EAAMyB,UAAUG,iBACrEC,EAAsB,SAAC7B,GAAD,OAAyBA,EAAMyB,UAAUpE,UAC/DyE,EAAoB,SAAC9B,GAAD,OAAyBA,EAAMyB,UAAUM,QAC7DC,EAAyB,SAAChC,GAAD,OAAyBA,EAAMyB,UAAUrE,aAClE6E,EAAyB,SAACjC,GAAD,OAAyBA,EAAMyB,UAAUS,aAClEC,EAA4B,SAACnC,GAAD,OAAyBA,EAAMyB,UAAUW,gB,iBCsCnEC,EA/BwB,SAAC,GAItC,IAJoJ,IAA5GC,EAA2G,EAA3GA,gBAAiBjF,EAA0F,EAA1FA,SAAUD,EAAgF,EAAhFA,YAAamF,EAAmE,EAAnEA,cAAeH,EAAoD,EAApDA,eAAgBF,EAAoC,EAApCA,YAAaM,EAAuB,EAAvBA,kBACxHC,EAAaC,KAAKC,KAAKL,EAAkBjF,GAEzCuF,EAAuB,GAClBC,EAAI,EAAGA,GAAKJ,EAAYI,IAC/BD,EAAME,KAAKD,GAGb,IAAIE,EAAeL,KAAKC,KAAKF,EAAaP,GACtCc,GAAYZ,EAAgB,GAAKF,EACjCe,EAAYb,EAAiBF,EAAc,EAE/C,OACE,sBAAKtB,UAAWS,IAAE6B,UAAlB,UACE,qBAAKtC,UAAWS,IAAE8B,WAAlB,SAA8B,wBAAQC,SAAUhB,GAAkB,EAAGiB,QAAS,WACpFb,EAAkBJ,EAAiB,IADC,oBAG9B,qBAAKxB,UAAWS,IAAEuB,MAAlB,SACGA,EAAMU,KAAI,SAAAC,GACT,GAAIA,EAAOP,GAAYO,EAAON,EACxC,OAAO,uBAAiBrC,UAAWxD,IAAgBmG,EAAOlC,IAAEmC,SAAW,GAAIH,QAAS,WAAQd,EAAcgB,IAAnG,UAA4GA,EAA5G,MAAWA,QAIZ,qBAAK3C,UAAWS,IAAEoC,WAAlB,SAA8B,wBAAQL,SAAUhB,IAAmBW,EAAcM,QAAS,WAChGb,EAAkBJ,EAAiB,IADC,wB,iBCgBrBsB,EA1CuB,SAAClD,GACrC,OACE,mCACM,sBAAKI,UAAWS,IAAEsC,SAAlB,UACE,sBAAK/C,UAAWS,IAAEuC,YAAlB,UACE,qBAAKhD,UAAWS,IAAEwC,WAAlB,SACE,cAAC,IAAD,CAASC,GAAI,WAAatD,EAAMuD,KAAK1E,GAArC,SACE,qBAAK2E,IAAgC,MAA3BxD,EAAMuD,KAAKE,OAAOC,MAAgB1D,EAAMuD,KAAKE,OAAOC,MAAQC,IAAWC,IAAI,eAGzF,qBAAKxD,UAAWS,IAAEgD,aAAlB,SACG7D,EAAMuD,KAAKO,SACV,wBACEjB,QAAS,WACP7C,EAAM3C,SAAS2C,EAAMuD,KAAK1E,KAF9B,oBAQA,wBACEgE,QAAS,WACP7C,EAAM9C,OAAO8C,EAAMuD,KAAK1E,KAF5B,sBAUN,sBAAKuB,UAAWS,IAAEkD,UAAlB,UACE,qBAAK3D,UAAWS,IAAE/B,KAAlB,SAAyBkB,EAAMuD,KAAKzE,OACpC,qBAAKsB,UAAWS,IAAElD,OAAlB,SAA2BqC,EAAMuD,KAAK5F,SACtC,sBAAKyC,UAAWS,IAAEmD,SAAlB,UACG,kBADH,KACwB,iCCuCvBC,eAbO,SAACzE,GACrB,MAAO,CACL0B,MAAOF,EAAiBxB,GACxB3C,SAAUwE,EAAoB7B,GAC9B4B,gBAAiBD,EAA0B3B,GAC3C5C,YAAa4E,EAAuBhC,GACpC+B,OAAQD,EAAkB9B,GAC1BkC,YAAaD,EAAuBjC,GACpCoC,eAAgBD,EAA0BnC,GAC1C9C,SAAUA,OAI+F,CAC3GQ,WACAG,aACA6G,mBACAvH,aACAqF,uBALaiC,EA5CqB,SAACjE,GACnCmE,qBAAU,WACRnE,EAAMrD,SAASqD,EAAMpD,YAAaoD,EAAMnD,YACvC,CAACmD,EAAMoB,kBAOV,OACE,qCACGpB,EAAMuB,QAAU,cAAC6C,EAAA,EAAD,IACjB,cAAC,EAAD,CACErC,cATgB,SAACsC,GACrBrE,EAAMrD,SAAS0H,EAAYrE,EAAMnD,UACjCmD,EAAMkE,eAAeG,IAQjBvC,gBAAiB9B,EAAMoB,gBACvBvE,SAAUmD,EAAMnD,SAChBD,YAAaoD,EAAMpD,YACnBgF,eAAgB5B,EAAM4B,eACtBF,YAAa1B,EAAM0B,YACnBM,kBAAmBhC,EAAMgC,oBAE1BhC,EAAMkB,MACJoD,QAAO,SAACC,GAAD,OAA8B,MAAlBA,EAAEd,OAAOC,OAAmC,MAAlBa,EAAEd,OAAOe,SACtD1B,KAAI,SAACyB,GAAD,OACH,cAAC,EAAD,CAAiBhB,KAAMgB,EAAGrH,OAAQ8C,EAAM9C,OAAQG,SAAU2C,EAAM3C,UAArDkH,EAAE1F,a,uBCtDR4F,EATA,SAACzE,GACZ,OACI,qBAAKI,UAAWS,IAAE9B,OAAlB,SAEI,qBAAKyE,IAAKxD,EAAMjB,OAAQ6E,IAAI,cCezBc,EAnBK,SAAC1E,GAQnB,OACE,gCACE,qBAAKI,UAAWS,IAAE9B,OAAlB,SACE,cAAC,EAAD,CAAQA,OAAQiB,EAAMjB,WAEvBiB,EAAM2E,SAAW,uBAAOvF,KAAM,OAAQwF,SAXrB,SAACC,GACfA,EAAEC,OAAOC,MAAMC,QACfhF,EAAMiF,gBAAgBJ,EAAEC,OAAOC,MAAM,OAUzC,qBAAK3E,UAAWS,IAAE/B,KAAlB,SAAyBkB,EAAMlB,WCNtBoG,EARI,SAAClF,GAChB,OACI,yC,iBCeOmF,EAhBF,SAACnF,GACV,OACI,sBAAKI,UAAWS,IAAEzD,KAAlB,UACI,8BACI,cAAC,EAAD,CAAQ2B,OAAQiB,EAAMjB,WAE1B,qBAAKqB,UAAWS,IAAEvB,KAAlB,SACKU,EAAMoF,WAEX,yCACWpF,EAAMqF,iBC0BdC,EArCI,SAACtF,GAEhB,IAAIuF,EAAcC,IAAMC,YAWpBC,EACA1F,EAAM2F,MAAM7C,KAAI,SAAC8C,GAAD,OAAO,cAAC,EAAD,CAAiB/G,GAAI+G,EAAE/G,GAAIuG,SAAUQ,EAAER,SAAUC,UAAWO,EAAEP,UAAWtG,OAAQiB,EAAMjB,QAA5E6G,EAAE/G,OAExC,OACI,sBAAKuB,UAAWS,IAAEgF,UAAlB,UACI,sBAAKzF,UAAWS,IAAEiF,SAAlB,UACI,0BAAUhH,KAAK,UACL0B,YAAa,eACbuF,IAAKR,EACL5E,MAAOX,EAAMuF,YACbX,SAfH,WACf,IAAItF,EAAOiG,EAAYS,QAAQrF,MAC/BX,EAAMiG,kBAAkB3G,IAcNc,UAAWS,IAAEqF,eAEvB,8BACI,wBAAQrD,QAvBV,WACV7C,EAAMmG,WAsBM,2BAGR,8BACKT,Q,QC6CFU,EArE2B,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,QAAS1I,EAAmD,EAAnDA,OAAQ2I,EAA2C,EAA3CA,iBAAkBC,EAAyB,EAAzBA,mBAAyB,EACvEC,oBAAS,GAD8D,mBAChGC,EADgG,KACtFC,EADsF,OAEtEF,mBAAS7I,GAF6D,mBAEhGgJ,EAFgG,KAEnFC,EAFmF,KAIvGzC,qBAAU,WACRyC,EAAUjJ,KACT,CAACA,IAEJ,IAaMkJ,EAAc,WAClB,OAAOC,OAAOC,QAAQV,EAAQW,UAAUlE,KAAI,SAACmE,GAC3C,GAAIA,EAAK,GACP,OACE,gCACE,4BAAIA,EAAK,KADX,KACqBA,EAAK,KADhBA,EAAK,QAQvB,OACE,gCACI,wBAAQpE,QAAS,WAAO0D,GAAmB,IAA3C,8BACF,qBAAKnG,UAAWS,IAAElD,OAAlB,SACG8I,EACC,uBACE7B,SAtBa,SAACC,GACtB+B,EAAU/B,EAAEqC,cAAcvG,QAsBlBvB,KAAK,OACLuB,MAAOgG,EACPQ,WAAW,EACXC,OA/BiB,WACzBV,GAAY,GACZJ,EAAiBK,MAgCX,8BAAMhJ,EAAS,uBAAMkF,QAtCJ,WACvB6D,GAAY,IAqCS,UAAiC,uCAAjC,KAAiD/I,KAAiB,yCAGrF,sBAAKyC,UAAWS,IAAEwF,QAAlB,UACGA,EAAQgB,SAAW,qBAAKjH,UAAWS,IAAEwG,UACtC,sBAAKjH,UAAWS,IAAEyG,eAAlB,UACE,kDADF,KAC6BjB,EAAQiB,eAAiB,MAAQ,QAE7DjB,EAAQiB,gBACP,sBAAKlH,UAAWS,IAAE0G,0BAAlB,UAA6C,4CAA7C,KAAkElB,EAAQkB,+BAE3EV,IAAcW,MAAK,SAAAP,GAAI,OAAIA,MAC5B,gCAAK,yCAAL,IACA,qBAAK7G,UAAWS,IAAEmG,SAAlB,SAA6BH,SAG7B,gCACE,mCADF,KACcR,EAAQlJ,iB,yBC3BfsK,cAAmC,CAChDC,KAAM,iBADOD,EAnC+B,SAACzH,GAC7C,IAA+B2H,EAS/B,OACE,8BACE,uBAAMC,SAAU5H,EAAM6H,aAAtB,qBACWtH,YAAY,UAAW,UAAWV,IAAkB,IAD/D,YAEYU,YAAY,WAAY,WAAYV,IAAkB,IAFlE,IAEuE,uBACpEU,YAAY,KAAM,iBAAkB,QAAS,GAAI,CAAEnB,KAAM,YAAc,sBAH1E,IAGiG,uBAHjG,IAGwG,uBAHxG,gCAKGmB,YAAY,4BAA6B,4BAA6BV,IAAkB,IACzF,0CACA,+BAlByB8H,EAkBG3H,EAAM8H,YAjB/BH,EAAW7E,KAAI,SAACmE,GAAD,OACpB,gCACE,iCAAOA,EAAP,QACC1G,YAAY,cAAD,OAAe0G,GAAQA,EAAMpH,IAAkB,MAFnDoH,SAiBR,cAACc,EAAA,EAAD,CAAOjJ,KAAM,gBAAiB2B,UAAW,SAAzC,4BAGA,wBACEoC,QAAS,WACP7C,EAAMuG,oBAAmB,IAF7B,4BCJOyB,EAlB4B,SAAChI,GAC1C,IADoD,EAMNwG,oBAAS,GANH,mBAM7CyB,EAN6C,KAM5B1B,EAN4B,KAO9CuB,EAAchB,OAAOoB,KAAKlI,EAAMqG,QAAQW,UAC/C,OACD,mCACEiB,EACA,cAAC,EAAD,CAAiBH,YAAaA,EAAaF,SAVvB,SAAC3K,GACnB+C,EAAM7B,cAAclB,GACpBkL,QAAQC,IAAInL,IAQoDsJ,mBAAoBA,EAAoBF,QAASrG,EAAMqG,UACzH,cAAC,EAAD,2BAAiBrG,GAAjB,IAAwBuG,mBAAoBA,QCb/B8B,EARS,SAACrI,GACrB,OACI,8BACI,qBAAKwD,IAAI,2CAA2CI,IAAI,mBCKrD0E,EARO,SAACtI,GACnB,OACI,8BACI,8CC+CGuI,GA5CC,SAACvI,GACf,OAAKA,EAAMqG,QAIT,sBAAKjG,UAAWS,IAAE2H,YAAlB,UACE,qBAAKpI,UAAWS,IAAE4H,gBAAlB,SACE,cAAC,EAAD,MAEF,qBAAKrI,UAAWS,IAAEuC,YAAc,IAAMvC,IAAE6H,MAAxC,SACE,cAAC,EAAD,CACE3J,OAAQiB,EAAMqG,QAAQ5C,OAAOe,MAC7B1F,KAAMkB,EAAMqG,QAAQsC,SACpBhE,QAAS3E,EAAM2E,QACfM,gBAAiBjF,EAAMiF,oBAG3B,qBAAK7E,UAAWS,IAAE+H,aAAe,IAAM/H,IAAE6H,MAAzC,SACE,cAAC,EAAD,CACErC,QAASrG,EAAMqG,QACf1I,OAAQqC,EAAMrC,OACd2I,iBAAkBtG,EAAMsG,iBACxBnI,cAAe6B,EAAM7B,kBAGzB,qBAAKiC,UAAWS,IAAEgI,cAAgB,IAAMhI,IAAE6H,MAA1C,SACE,cAAC,EAAD,MAEF,qBAAKtI,UAAWS,IAAEiI,WAAa,IAAMjI,IAAE6H,MAAvC,SACE,cAAC,EAAD,MAEF,qBAAKtI,UAAWS,IAAEkI,WAAa,IAAMlI,IAAE6H,MAAvC,SACE,cAAC,EAAD,CACEvC,QAASnG,EAAMmG,QACfF,kBAAmBjG,EAAMiG,kBACzBN,MAAO3F,EAAM2F,MACbJ,YAAavF,EAAMuF,YACnBxG,OAAQiB,EAAMqG,QAAQ5C,OAAOe,aAnC5B,cAACJ,EAAA,EAAD,K,sCCPL4E,GAAW,mBACXC,GAAc,sBACdC,GAAuB,+BACvBC,GAAc,sBACdC,GAAa,qBACbC,GAAY,YAuCd1K,GAAe,CACfgH,MAAO,CACH,CACI9G,GAAI,EACJuG,SAAU,mFACVC,UAAW,GAEf,CAACxG,GAAI,EAAGuG,SAAU,eAAgBC,UAAW,IAEjDiE,aAAc,CACV,CACIzK,GAAI,EACJ0K,SAAU,OACVC,eAAgB,YAChBC,gBAAiB,mBACjBC,iBAAkB,eAG1BnE,YAAa,GACbc,QAAS,KACT1I,OAAQ,MAsENgM,GAAgB,SAAChM,GAAD,MAAoC,CAACyB,KAAMgK,GAAYzL,WAYhEH,GAAa,SAACL,GAAD,gDAA+B,WAAOyM,GAAP,gBAAAC,EAAA,sEAClCtM,IAAWC,WAAWL,GADY,OACnDH,EADmD,OAErD4M,EApBsD,CAACxK,KAAM+J,GAAa9C,QAoBtDrJ,IAFiC,2CAA/B,uDAsDX8M,GA7HY,WAAoE,IAAnEtK,EAAkE,uDAA1Db,GAAcc,EAA4C,uCAC1F,OAAQA,EAAOL,MACX,KAAK4J,GACD,OAAO,2BACAxJ,GADP,IAEImG,MAAM,CAAE,CAAC9G,GAAI,EAAGuG,SAAU5F,EAAM+F,YAAaF,UAAW,IAAnD,oBAA0D7F,EAAMmG,QACrEJ,YAAa,KAGrB,KAAK0D,GACD,OAAO,2BACAzJ,GADP,IACcmG,MAAOnG,EAAMmG,MAAMrB,QAAO,SAAAlH,GAAI,OAAIA,EAAKyB,KAAOY,EAAOsK,YAGvE,KAAKb,GACD,OAAO,2BAAI1J,GAAX,IAAkB+F,YAAa9F,EAAO8F,cAC1C,KAAK4D,GACD,OAAO,2BAAI3J,GAAX,IAAkB6G,QAAS5G,EAAO4G,UACtC,KAAK+C,GACD,OAAO,2BAAI5J,GAAX,IAAkB7B,OAAQ8B,EAAO9B,SACrC,KAAK0L,GACD,OAAO,2BAAI7J,GAAX,IAAkB6G,QAAQ,2BAAK7G,EAAM6G,SAAZ,IAAqB5C,OAAQhE,EAAOgE,WACjE,QACI,OAAOjE,I,kBC3DbwK,G,iKACJ,WACE,IAAI7M,EAAS8M,KAAKjK,MAAMkK,MAAMC,OAAOhN,OACrC,IAAKA,KACHA,EAAS8M,KAAKjK,MAAMoK,WAElB,OAAO,cAAC,IAAD,CAAU9G,GAAG,WAGxB2G,KAAKjK,MAAMxC,WAAWL,GACtB8M,KAAKjK,MAAMqK,cAAclN,K,+BAG3B,WACE8M,KAAKK,gB,gCAEP,SAAmBC,GACbN,KAAKjK,MAAMkK,MAAMC,OAAOhN,SAAWoN,EAAUL,MAAMC,OAAOhN,QAC5D8M,KAAKK,gB,oBAIT,WACE,OACE,cAAC,GAAD,2BAAaL,KAAKjK,OAAlB,IAAyB2E,SAAUsF,KAAKjK,MAAMkK,MAAMC,OAAOhN,OAAQ8H,gBAAiBgF,KAAKjK,MAAMiF,uB,GAxBtEO,IAAMgF,WAuCtBC,gBACbxG,aAZsB,SAACzE,GACvB,MAAO,CACLmG,MAAOnG,EAAMgJ,YAAY7C,MACzBJ,YAAa/F,EAAMgJ,YAAYjD,YAC/Bc,QAAS7G,EAAMgJ,YAAYnC,QAC3B1I,OAAQ6B,EAAMgJ,YAAY7K,OAC1BJ,WAAYA,IACZ6M,UAAW5K,EAAMkL,KAAK7L,MAKC,CACvBrB,cACA2I,QDwBmB,iBAAoB,CAAC/G,KAAM4J,KCvB9C/C,kBDqC6B,SAACV,GAAD,MAA6C,CAC1EnG,KAAM8J,GACN3D,gBCtCA8E,cDmEyB,SAAClN,GAAD,gDAA+B,WAAOyM,GAAP,gBAAAC,EAAA,sEACjCtM,IAAWE,UAAUN,GADY,OAClDH,EADkD,OAExD4M,EAASD,GAAc3M,IAFiC,2CAA/B,uDClEzBsJ,iBDuE4B,SAAC3I,GAAD,gDAA+B,WAAOiM,GAAP,UAAAC,EAAA,sEACpCtM,IAAWG,aAAaC,GADY,OAE1B,IAF0B,OAE9CV,KAAK0N,YACdf,EAASD,GAAchM,IAHgC,2CAA/B,uDCtE5BsH,gBD6E2B,SAACnH,GAAD,gDAA4B,WAAO8L,GAAP,gBAAAC,EAAA,sEAChCtM,IAAWM,YAAYC,GADS,OAE3B,KADtBd,EADiD,QAE1C2N,YACTf,GAxBcnG,EAwBQzG,EAASC,KAAKwG,OAxBgB,CAACrE,KAAMiK,GAAW5F,YAqBnB,iCArBtC,IAACA,IAqBqC,OAA5B,uDC5E3BtF,cDkGyB,SAAClB,GAAD,gDAA8C,WAAO2M,GAAP,gBAAAC,EAAA,6DACjEe,EAAc,CAChB,QAAW3N,EAAK4N,QAChB,eAAkB5N,EAAKqK,eACvB,SAAYrK,EAAK6N,SACjB,0BAA6B7N,EAAKsK,0BAClC,SAAY,CACRwD,OAAQ9N,EAAK8N,OAAQC,SAAU/N,EAAK+N,SAAUC,UAAWhO,EAAKgO,UAAWC,GAAIjO,EAAKiO,GAAIC,QAASlO,EAAKkO,QACvGC,QAASnO,EAAKmO,QAASC,QAASpO,EAAKoO,QAASC,SAAUrO,EAAKqO,WARK,SAUpD/N,IAAWY,cAAcyM,GAV2B,OAW/C,IAX+C,OAW9DD,YACTf,EAASpM,GAAW,OAZmD,2CAA9C,yDChG3B+N,IACAC,KAXaf,CAYbT,I,oBCzEayB,GAlBA,SAACzL,GACd,OACE,yBAAQI,UAAWS,KAAE6K,OAArB,UACE,sBAAKtL,UAAWS,KAAE8K,KAAlB,UACE,qBAAKnI,IAAI,iDAAiDI,IAAI,SAC9D,8CAEF,qBAAKxD,UAAWS,KAAE6J,KAAlB,SACG1K,EAAM4L,QACL,qBAAK/I,QAAS7C,EAAM6L,mBAApB,SAAyC7L,EAAM1B,QAE/C,cAAC,IAAD,CAASgF,GAAG,SAAZ,gC,SCTJwI,G,4JACJ,WACE,OAAO,cAAC,GAAD,eAAY7B,KAAKjK,Y,GAFEwF,IAAMgF,WAarBvG,gBAPS,SAACzE,GACvB,MAAO,CACLlB,MAAOkB,EAAMkL,KAAKpM,MAClBsN,QAASpM,EAAMkL,KAAKkB,WAIgB,CAAEC,yBAA3B5H,CACb6H,I,oBC8BaC,GA9CC,SAAC/L,GACf,OACE,sBAAKI,UAAWS,KAAEmL,OAAlB,UACE,qBAAK5L,UAAWS,KAAEoL,aAClB,sBAAK7L,UAAWS,KAAEqL,KAAlB,UACE,8BACE,cAAC,IAAD,CAAS5I,GAAI,YAAa6I,gBAAiBtL,KAAEuL,WAA7C,uBAIF,8BACE,cAAC,IAAD,CAAS9I,GAAG,WAAW6I,gBAAiBtL,KAAEuL,WAA1C,wBAIF,8BACE,cAAC,IAAD,CAAS9I,GAAG,QAAQ6I,gBAAiBtL,KAAEuL,WAAvC,oBAIF,8BACE,cAAC,IAAD,CAAS9I,GAAG,SAAS6I,gBAAiBtL,KAAEuL,WAAxC,qBAIF,8BACE,cAAC,IAAD,CAAS9I,GAAG,YAAY6I,gBAAiBtL,KAAEuL,WAA3C,wBAIF,8BACE,cAAC,IAAD,CAAS9I,GAAG,SAAS6I,gBAAiBtL,KAAEuL,WAAxC,qBAIF,uBACA,8BACE,cAAC,IAAD,CAAS9I,GAAG,WAAW6I,gBAAiBtL,KAAEuL,WAA1C,8BCrCJC,GAAsB,0BAMxB1N,GAAe,CACjB2N,eAAe,GAuCFC,GApCI,WAGK,IAFtB/M,EAEqB,uDAFbb,GACRc,EACqB,uCACrB,OAAQA,EAAOL,MACb,KAAKiN,GACH,OAAO,2BACF7M,GADL,IAEE8M,eAAe,IAEnB,QACE,OAAO9M,ICXPgN,GAAmBhH,IAAMiH,MAAK,kBAAM,iCACpCC,GAAmBlH,IAAMiH,MAAK,kBAAM,iCACpCE,GAAiBnH,IAAMiH,MAAK,kBAAM,iCAElCG,G,uKACJ,WACE3C,KAAKjK,MAAM6M,e,oBAGb,WACE,OAAK5C,KAAKjK,MAAMsM,cAGd,sBAAKlM,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,sBAAKA,UAAU,UAAf,UACE,cAAC,IAAD,CAAO0M,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAU1J,GAAI,gBAClD,cAAC,IAAD,CAAOyJ,KAAK,oBAAoBC,OAAQ,kBAAM,cAAC,GAAD,OAC9C,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQC,aAAaT,MAC5C,cAAC,IAAD,CAAOO,KAAK,SAASC,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQC,aAAaP,MAC5C,cAAC,IAAD,CAAOK,KAAK,SAASC,OAAQC,aAAaN,SAE5C,qBAAKvM,UAAU,aAAf,SACE,cAAC,EAAD,MAEF,cAAC,EAAD,OAjBkC,cAACgE,EAAA,EAAD,Q,GANxBoB,IAAMgF,WAiCTvG,gBAJS,SAACzE,GAAD,MAAY,CAClC8M,cAAe9M,EAAM0N,IAAIZ,iBAGa,CAAEO,WDPhB,kBAAM,SAACjD,GAC/BA,EAASvL,gBAAStB,MAAK,WACrB6M,EAbuD,CACzDxK,KAAMiN,WCiBOpI,CAAyC2I,ICvCpCO,QACW,cAA7BC,OAAOpJ,SAASqJ,UAEe,UAA7BD,OAAOpJ,SAASqJ,UAEhBD,OAAOpJ,SAASqJ,SAASnD,MACvB,2D,cCRFvL,GAAe,CACf2O,OAAQ,CACJ,CAACzO,GAAI,EAAGC,KAAM,SAAUC,OAAQ,6CAChC,CAACF,GAAI,EAAGC,KAAM,SAAUC,OAAQ,wCAChC,CAACF,GAAI,EAAGC,KAAM,QAASC,OAAQ,0CASxBwO,GALO,WAAmE,IAAlE/N,EAAiE,uDAAzDb,GAE/B,OAAOa,G,oBCVHgO,GAAcC,aAAgB,CAChCjF,YAAasB,GACb4D,YAAanO,KACb+N,OAAQC,GACRtM,UAAW0M,IACXjD,KAAMkD,KACNlG,KAAMmG,KACNX,IAAKX,KAODuB,GAAmBV,OAAOW,sCAAwCtD,KAEpEuD,GAAQC,aACVT,GACAM,GAAiBI,aAAgBC,QAGnCf,OAAOY,MAAQA,GAAMI,WAENJ,UCxBfK,IAASrB,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAUgB,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJM,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3R,MAAK,SAAA4R,GACjCA,EAAaC,iB,yCIrIJ,MAA0B,sC,OCM1BxK,IAFG,kBAAM,qBAAKvF,GAAG,eAAR,SAAuB,qBAAK2E,IAAKqL,EAAWjL,IAAI,a,wRCJ3DkL,EAAsB,SAACC,EAAYC,EAAqBC,EAAiBC,GACpF,OAAOH,EAAMjM,KAAI,SAACmE,GAChB,OAAIA,EAAK+H,KAAiBC,EACjB,2BAAKhI,GAASiI,GAEhBjI,MCALkI,EAAS,eACTC,EAAW,iBACXC,EAAY,kBACZC,EAAmB,yBACnBC,EAAwB,8BACxBC,EAAgB,sBAChBC,EAAsB,sBAiBxB9Q,EAAe,CACjBuC,MAAO,GACPrE,SAAU,IACVuE,gBAAiB,EACjBxE,YAAa,EACb2E,QAAQ,EACRG,YAAa,GACbE,eAAgB,GA6CL8N,EAAgB,SAACvS,GAAD,MAA8C,CACzEiC,KAAM+P,EACNhS,WAOWwS,EAAkB,SAACxS,GAAD,MAAgD,CAC7EiC,KAAMgQ,EACNjS,WAOWyS,EAAW,SAAC1O,GAAD,MAAqC,CAC3D9B,KAAMiQ,EACNnO,UAOWgD,EAAiB,SAACtH,GAAD,MAA0C,CACtEwC,KAAMkQ,EACN1S,gBAgBWiT,EAAe,SAACtO,GAAD,MAAoC,CAC9DnC,KAAMoQ,EACNjO,WAQWS,EAAoB,SAAC8N,GAAD,MAAmD,CAAC1Q,KAAMqQ,EAAqBK,sBAInGnT,EAAW,SAACC,EAAqBC,GAAtB,8CAAsD,WAAO+M,GAAP,eAAAC,EAAA,6DAC5ED,EAASiG,GAAa,IADsD,SAErDnT,IAASC,SAASC,EAAaC,GAFsB,OAEtEG,EAFsE,OAG5E4M,EAASiG,GAAa,IACtBjG,EAASgG,EAAS5S,EAAS+R,QAC3BnF,GA5BiCxI,EA4BLpE,EAAS+S,WA5B6C,CAClF3Q,KAAMmQ,EACNnO,qBAqB4E,iCAvB5C,IAACA,IAuB2C,OAAtD,uDAQlB4O,EAAwB,uCAAG,WAC/BC,EACAxQ,EACAmK,EACAzM,GAJ+B,SAAA0M,EAAA,sEAMRoG,EAAU9S,GANF,OAOH,IAPG,OAOlBwN,YACXf,EAASnK,GARoB,2CAAH,4DAYjBvC,EAAS,SAACC,GAAD,8CAA+B,WAAOyM,GAAP,SAAAC,EAAA,sDACnDmG,EAAyBtT,IAASQ,OAAOgT,KAAKxT,KAAWgT,EAAcvS,GAASyM,EAAUzM,GADvC,2CAA/B,uDAGTE,EAAW,SAACF,GAAD,8CAA+B,WAAOyM,GAAP,SAAAC,EAAA,sDACrDmG,EAAyBtT,IAASW,SAAS6S,KAAKxT,KAAWiT,EAAgBxS,GAASyM,EAAUzM,GADzC,2CAA/B,uDAITwQ,IAvHM,WAAmE,IAAlEnO,EAAiE,uDAAzDb,EAAcc,EAA2C,uCACrF,OAAQA,EAAOL,MACb,KAAK+P,EACH,OAAO,2BACF3P,GADL,IAEE0B,MAAO4N,EAAoBtP,EAAM0B,MAAO,KAAMzB,EAAOtC,OAAQ,CAAC2G,UAAU,MAE5E,KAAKsL,EACH,OAAO,2BACF5P,GADL,IAEE0B,MAAO4N,EAAoBtP,EAAM0B,MAAO,KAAMzB,EAAOtC,OAAQ,CAAC2G,UAAU,MAE5E,KAAKuL,EACH,OAAO,2BAAK7P,GAAZ,IAAmB0B,MAAOzB,EAAOyB,QACnC,KAAKoO,EACH,OAAO,2BAAK9P,GAAZ,IAAmB5C,YAAa6C,EAAO7C,YAAasE,MAAO,KAC7D,KAAKqO,EACH,OAAO,2BAAK/P,GAAZ,IAAmB4B,gBAAiB3B,EAAO2B,kBAC7C,KAAKoO,EACH,OAAO,2BAAKhQ,GAAZ,IAAmB+B,OAAQ9B,EAAO8B,SAClC,KAAKkO,EACH,OAAO,2BACFjQ,GADL,IACYoC,eAAgBnC,EAAOqQ,oBAEvC,QACE,OAAOtQ,K,0LClEP2Q,EAAqB,0BACrBC,EAAkB,uBAIpBzR,EAAe,CACjBE,GAAI,KACJP,MAAO,KACP+R,MAAO,KACPzE,SAAS,EACT0E,WAAY,MAqCRC,EAAc,SAClBtT,EACA2O,GAFkB,MAGD,CACjBxM,KAAM+Q,EACNlT,OACA2O,YAQI4E,EAAgB,SAACF,GAAD,MAA4C,CAChElR,KAAMgR,EACNE,eAUWjS,EAAQ,yDAAiB,WAAOuL,GAAP,eAAAC,EAAA,sEACbzL,IAAQC,QADK,OAER,KADtBrB,EAD8B,QAEvB2N,WACXf,EAAS2G,EAAYvT,EAASC,MAAM,IAEpC2M,EAAS2G,EAAY,CAAE1R,GAAI,KAAMP,MAAO,KAAM+R,MAAO,OAAQ,IAL3B,2CAAjB,uDASRI,EAAmB,SAC9BxT,GAD8B,8CAEhB,WAAO2M,GAAP,mBAAAC,EAAA,sEACSzL,IAAQE,MAAMrB,GADvB,UACRD,EADQ,OAER0T,EACJ1T,EAASgC,SAASgG,OAAS,EAAIhI,EAASgC,SAAS,GAAK,aAC5B,IAAxBhC,EAAS2N,WAJC,gBAKZf,EAASvL,KALG,0BAMqB,IAAxBrB,EAAS2N,WANN,iBAOZf,EAAS+G,YAAW,QAAS,CAAEC,OAAQF,KAP3B,2BAQqB,KAAxB1T,EAAS2N,WARN,kCASavM,IAAQI,gBATrB,QASN8R,EATM,OAUZ1G,EAAS4G,EAAcF,EAAWO,MAVtB,4CAFgB,uDAgBnBhF,EAAqB,yDAAiB,WAAOjC,GAAP,SAAAC,EAAA,sEAC1BzL,IAAQG,SADkB,OAErB,IAFqB,OAEpCoM,YACXf,EAASvL,KAHsC,2CAAjB,uDAOnBuP,IA1FK,WAGI,IAFtBpO,EAEqB,uDAFbb,EACRc,EACqB,uCACrB,OAAQA,EAAOL,MACb,KAAK+Q,EACH,OAAO,uCACF3Q,GACAC,EAAOxC,MAFZ,IAGE2O,QAASnM,EAAOmM,UAEpB,KAAKwE,EACH,OAAO,2BACF5Q,GADL,IAEE8Q,WAAY7Q,EAAO6Q,aAEvB,QACE,OAAO9Q,K,mKChCPsR,EAA6B,SAACtR,GAClC,MAAO,CACLoM,QAASpM,EAAMkL,KAAKkB,UAIXJ,EAAe,SAAChB,GAO3B,OAAOvG,YAAQ6M,EAAR7M,EANkC,SAACjE,GACxC,OAAKA,EAAM4L,QAGJ,cAACpB,EAAD,eAAexK,IAFb,cAAC,IAAD,CAAUsD,GAAI,eAiBd2J,EAAe,SAACzC,GAAD,OAAe,WACzC,OACE,cAAC,WAAD,CAAUuG,SAAU,cAAC,IAAD,IAApB,SACE,cAACvG,EAAD,S,mBClCN7K,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,QAAU,gC,kBCAhHD,EAAOC,QAAU,CAAC,YAAc,6BAA6B,gBAAkB,iCAAiC,YAAc,6BAA6B,OAAS,wBAAwB,aAAe,8BAA8B,cAAgB,+BAA+B,WAAa,4BAA4B,WAAa,4BAA4B,SAAW,0BAA0B,MAAQ,uBAAuB,KAAO,sBAAsB,aAAe,8BAA8B,YAAc,+B,mBCAtgBD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,KAAO,uB,mBCArFD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,sB","file":"static/js/main.b100275d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.c9034bb5.png\";","import axios from 'axios'\nimport { SubmiteAuthDataTypes } from '../common/types/types'\n\nconst instance = axios.create({\n  withCredentials: true,\n  headers: { 'API-KEY': 'ca78cc0b-4b4d-4a86-9c5b-ca3e19ff60be' },\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n})\n\nexport const usersAPI = {\n  getUsers(currentPage: number, pageSize: number) {\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`).then((response) => response.data)\n  },\n  follow(userId: number) {\n    return instance.post(`follow/${userId}`, {}).then((response) => response.data)\n  },\n  unfollow(userId: number) {\n    return instance.delete(`follow/${userId}`).then((response) => response.data)\n  },\n}\n\nexport const profileAPI = {\n  getProfile(userId: number) {\n    return instance.get(`profile/${userId}`).then((response) => response.data)\n  },\n  getStatus(userId: number) {\n    return instance.get(`/profile/status/${userId}`).then((response) => response.data)\n  },\n  updateStatus(status: string) {\n    return instance.put(`/profile/status`, { status })\n  },\n  uploadPhoto(photo: File) {\n    const formData = new FormData()\n    formData.append('image', photo)\n    return instance\n      .put('/profile/photo', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      })\n      .then((res) => res.data)\n  },\n  updateProfile(data: any) {\n    return instance.put('/profile', data).then((res) => res.data)\n  },\n}\n\ntype MeResponseTypes = {\n  data: { id: number, email: string, login: string },\n  resultCode: number,\n  messages: Array<string>,\n}\n\ntype LoginType = {\n  resultCode: number,\n  messages: Array<string>,\n  data: { userId: number },\n}\n\ntype CaptchaType = {\n  url: string,\n}\n\nexport const authAPI = {\n  getMe() {\n    return instance.get<MeResponseTypes>('auth/me').then((res) => res.data)\n  },\n  login(data: SubmiteAuthDataTypes) {\n    return instance\n      .post<LoginType>('auth/login', { ...data })\n      .then((res) => res.data)\n  },\n  logout() {\n    return instance.delete('auth/login').then((res) => res.data)\n  },\n  getCaptchaUrl() {\n    return instance.get<CaptchaType>('/security/get-captcha-url').then((res) => res.data)\n  },\n}\n","const SEND_MESSAGE = 'dialog/SEND-MESSAGE';\nconst UPDATE_NEW_MESSAGE_TEXT = \"dialog/UPDATE-NEW-MESSAGE-TEXT\";\n\ntype InitialStateType = typeof initialState\ntype DialogType = {\n    id: number\n    name: string\n    avatar: string\n}\ntype MessageType = {\n    id: number\n    message: string\n}\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: 'Pashok', avatar: 'https://i.ibb.co/HxhbGXP/Zoidberg-rev.jpg'},\n        {id: 2, name: 'Polina', avatar: 'https://i.ibb.co/bQdMS9z/Amy-rev.jpg'},\n        {id: 3, name: 'Vovan', avatar: 'https://i.ibb.co/0BRBtWB/unnamed.gif'}\n    ] as Array<DialogType>,\n        messages: [\n    {id: 1, message: 'i am kachok'},\n    {id: 2, message: 'ti gde?'},\n    {id: 3, message: 'Poidem buhat`?'}\n] as Array<MessageType>,\n    newMessageText: ''\n};\n\ntype ActionsTypes = SendMessage | UpdateNewMessageText\n\nconst dialogsPageReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n    let stateCopy;\n    switch (action.type) {\n        case SEND_MESSAGE:\n            let newMessage = state.newMessageText;\n            stateCopy = {...state,\n                messages: [...state.messages, {id:4, message: newMessage}],\n                newMessageText: ''\n            };\n            return stateCopy;\n        case UPDATE_NEW_MESSAGE_TEXT:\n            stateCopy = {...state,\n            newMessageText: action.newMessageText\n            };\n            return stateCopy;\n        default:\n            return state;\n    }\n};\n\ntype SendMessage = {\n    type: typeof SEND_MESSAGE\n}\ntype UpdateNewMessageText = {\n    type: typeof UPDATE_NEW_MESSAGE_TEXT\n    newMessageText: string\n}\n\nexport const sendMessage = (): SendMessage => ({type: SEND_MESSAGE});\nexport const updateNewMessageText = (text: string): UpdateNewMessageText => ({type: UPDATE_NEW_MESSAGE_TEXT, newMessageText: text});\n\nexport default dialogsPageReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3kRR3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Users_selected__HhKjL\",\"setUsersButton\":\"Users_setUsersButton__rIiPI\",\"paginator\":\"Users_paginator__3LXyl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__1kHCk\",\"menu\":\"Navbar_menu__2F1R7\",\"activeLink\":\"Navbar_activeLink__3WQN3\"};","import React from 'react'\nimport { Field } from 'redux-form'\nimport { withTag } from '../../../utils/HOCs'\nimport style from './FormsControl.module.css'\n\nexport const InputWithComment = ({ input, meta, ...props }: any) => {\n  const hasError = meta.touched && meta.error\n  return (\n    <div>\n      <div>\n        <input {...input} {...props} className={hasError ? style.error : ''} />\n      </div>\n      <div>{hasError && <span className={style.redText}>{meta.error}</span>}</div>\n    </div>\n  )\n}\n\nexport const createField = (\n  placeholder: string | null,\n  name: string,\n  component: any,\n  validate: Array<(arg: any) => string | undefined>,\n  props: any = {},\n  value = ''\n) => {\n  return (\n    <>\n      <Field placeholder={placeholder} name={name} component={component} validate={validate} {...props} />\n      {value}\n    </>\n  )\n}\n","import React from 'react';\nimport s from './Footer.module.css'\n\nconst Footer = (props) => {\n    return (\n        <div className={s.footer}>\n            <div>\n                This site create by lex94 with love :)\n            </div>\n        </div>\n    )\n};\n\nexport default Footer;","import React from 'react';\n\n\nconst Background = (props) => {\n    return (\n        <div>\n\n        </div>\n    )\n};\n\nexport default Background ;","import { AppStateType } from './../reduxStore';\n\nexport const getUsersSelector = (state: AppStateType) => state.usersPage.users\nexport const getTotalUserCountSelector = (state: AppStateType) => state.usersPage.totalUsersCount\nexport const getPageSizeSelector = (state: AppStateType) => state.usersPage.pageSize\nexport const getIsLoadSelector = (state: AppStateType) => state.usersPage.isLoad\nexport const getCurrentPageSelector = (state: AppStateType) => state.usersPage.currentPage\nexport const getPortionSizeSelector = (state: AppStateType) => state.usersPage.portionSize\nexport const getCurrentPortionSelector = (state: AppStateType) => state.usersPage.currentPortion","import React, { useState } from 'react'\nimport { register } from '../../../serviceWorker'\nimport s from '../../Content/Users/Users.module.css'\n\ntype PropsTypes = {\n  totalItemsCount: number\n  pageSize: number\n  currentPage: number\n  portionSize: number\n  currentPortion: number\n\n  onPageChanged: (p: number) => void\n  setCurrentPortion: (newCurrentPortion: number) => void\n}\n\nconst Paginator: React.FC<PropsTypes>= ({ totalItemsCount, pageSize, currentPage, onPageChanged, currentPortion, portionSize, setCurrentPortion}) => {\n  let pagesCount = Math.ceil(totalItemsCount / pageSize)\n\n  let pages: Array<number> = []\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i)\n  }\n  \n  let portionCount = Math.ceil(pagesCount / portionSize)\n  let leftPart = (currentPortion -1) * portionSize\n  let rightPart = currentPortion * portionSize + 1\n\n  return (\n    <div className={s.paginator}>\n      <div className={s.prevButton}><button disabled={currentPortion <= 1} onClick={() => {\nsetCurrentPortion(currentPortion - 1)\n      }}>PREV</button></div>\n      <div className={s.pages}>\n        {pages.map(page => {\n          if (page > leftPart && page < rightPart) {\nreturn <span key={page} className={currentPage === page ? s.selected : ''} onClick={() => { onPageChanged(page)}}>{page} </span>\n          }\n        })}\n      </div>\n      <div className={s.nextButton}><button disabled={currentPortion === portionCount} onClick={() => {\nsetCurrentPortion(currentPortion + 1)\n      }}>NEXT</button></div>\n    </div>\n  )\n}\n\nexport default Paginator","import React from 'react'\nimport s from './Users.module.css'\nimport userPhoto from '../../../img/user.png'\nimport { NavLink } from 'react-router-dom'\nimport { UserType } from '../../../store/usersReducer'\n\nexport type UserPropsType = {\n  user: UserType\n\n  follow: (id: number) => void,\n  unfollow: (id: number) => void,\n}\n\nconst User: React.FC<UserPropsType> = (props) => {\n  return (\n    <>\n          <div className={s.userItem}>\n            <div className={s.avatarBlock}>\n              <div className={s.userAvatar}>\n                <NavLink to={'profile/' + props.user.id}>\n                  <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto} alt=\"avatar\" />\n                </NavLink>\n              </div>\n              <div className={s.followButton}>\n                {props.user.followed ? (\n                  <button\n                    onClick={() => {\n                      props.unfollow(props.user.id)\n                    }}\n                  >\n                    Remove\n                  </button>\n                ) : (\n                  <button\n                    onClick={() => {\n                      props.follow(props.user.id)\n                    }}\n                  >\n                    Add\n                  </button>\n                )}\n              </div>\n            </div>\n            <div className={s.infoBlock}>\n              <div className={s.name}>{props.user.name}</div>\n              <div className={s.status}>{props.user.status}</div>\n              <div className={s.location}>\n                {'u.location.city'}, {'u.location.country'}\n              </div>\n            </div>\n          </div>\n    </>\n  )\n}\n\nexport default User\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { follow, getUsers, setCurrentPage, unfollow, setCurrentPortion } from '../../../store/usersReducer'\nimport Preloader from '../../Common/Preloader/Preloader'\nimport { usersAPI } from '../../../api/api'\nimport { UserType } from '../../../store/usersReducer'\nimport { AppStateType } from '../../../store/reduxStore'\nimport {\n  getUsersSelector,\n  getTotalUserCountSelector,\n  getPageSizeSelector,\n  getIsLoadSelector,\n  getCurrentPageSelector,\n  getPortionSizeSelector,\n  getCurrentPortionSelector\n} from '../../../store/selectors/usersSelector'\nimport Paginator from '../../Common/Paginator/Paginator'\nimport User from './User'\n\ntype MapStatePropsType = {\n  users: Array<UserType>\n  pageSize: number\n  totalUsersCount: number\n  currentPage: number\n  usersAPI: any //!!!!!!Исправить\n  portionSize: number\n  currentPortion: number\n  isLoad: boolean\n}\n\ntype MapDispatchPropsType = {\n  follow: (id: number) => void\n  unfollow: (id: number) => void\n  setCurrentPortion: (newCurrentPortion: number) => void\n  getUsers: (pageNumber: number, pageSize: number) => void\n  setCurrentPage: (pageNumber: number) => void\n}\n\ntype OwnPropsType = {}\n\nexport type PropsTypes = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\nconst Users: React.FC<PropsTypes> = (props) => {\n  useEffect(() => {\n    props.getUsers(props.currentPage, props.pageSize)\n  }, [props.totalUsersCount])\n\n  const onPageChanged = (pageNumber: number) => {\n    props.getUsers(pageNumber, props.pageSize)\n    props.setCurrentPage(pageNumber)\n  }\n\n  return (\n    <> \n      {props.isLoad && <Preloader />}\n      <Paginator\n        onPageChanged={onPageChanged}\n        totalItemsCount={props.totalUsersCount}\n        pageSize={props.pageSize}\n        currentPage={props.currentPage}\n        currentPortion={props.currentPortion}\n        portionSize={props.portionSize}\n        setCurrentPortion={props.setCurrentPortion}\n      />\n      {props.users\n        .filter((u: any) => u.photos.small != null && u.photos.large != null)\n        .map((u) => (\n          <User key={u.id} user={u} follow={props.follow} unfollow={props.unfollow} />\n        ))}\n    </>\n  )\n}\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    users: getUsersSelector(state),\n    pageSize: getPageSizeSelector(state),\n    totalUsersCount: getTotalUserCountSelector(state),\n    currentPage: getCurrentPageSelector(state),\n    isLoad: getIsLoadSelector(state),\n    portionSize: getPortionSizeSelector(state),\n    currentPortion: getCurrentPortionSelector(state),\n    usersAPI: usersAPI,\n  }\n}\n\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\n  follow,\n  unfollow,\n  setCurrentPage,\n  getUsers,\n  setCurrentPortion\n})(Users)\n","import React from 'react';\nimport s from \"../../Profile.module.css\";\n\n\nconst Avatar = (props) => {\n    return (\n        <div className={s.avatar}>\n            {/*<img src=\"https://pbs.twimg.com/profile_images/3033480309/2b618bfdb579a5f3bc5234dfb0599256.jpeg\" alt=\"avatar\"/>*/}\n            <img src={props.avatar} alt=\"avatar\"/>\n        </div>\n    )\n};\n\nexport default Avatar;","import React from 'react'\nimport s from '../Profile.module.css'\nimport Avatar from './Avatar/Avatar'\n\nconst AvatarBlock = (props) => {\n\n  const onChangePhoto = (e) => {\n      if (e.target.files.length) {\n          props.uploadUserPhoto(e.target.files[0])\n        }   \n  }\n\n  return (\n    <div>\n      <div className={s.avatar}>\n        <Avatar avatar={props.avatar} />\n      </div>\n      {props.isOwner && <input type={'file'} onChange={onChangePhoto} />}\n      <div className={s.name}>{props.name}</div>\n    </div>\n  )\n}\n\nexport default AvatarBlock\n","import React from 'react';\nimport s from \"../Profile.module.css\";\n\n\nconst PhotoBlock = (props) => {\n    return (\n        <div>\n            photo\n        </div>\n    )\n};\n\nexport default PhotoBlock;","import React from 'react';\nimport Avatar from \"../../AvatarBlock/Avatar/Avatar\";\nimport s from './Post.module.css'\n\n\nconst Post = (props) => {\n    return (\n        <div className={s.post}>\n            <div>\n                <Avatar avatar={props.avatar}/>\n            </div>\n            <div className={s.text}>\n                {props.postText}\n            </div>\n            <div>\n                Like: {props.likeCount}\n            </div>\n        </div>\n    )\n};\n\nexport default Post;","import React from 'react';\nimport s from \"../Profile.module.css\";\nimport Post from \"./Post/Post\";\n\nconst PostsBlock = (props) => {\n\n    let newPostText = React.createRef();\n\n    let addPost = () => {\n        props.addPost();\n    };\n\n    let onPostChange = () => {\n        let text = newPostText.current.value;\n        props.updateNewPostText(text);\n    };\n\n    let postData =\n        props.posts.map((p) => <Post key={p.id} id={p.id} postText={p.postText} likeCount={p.likeCount} avatar={props.avatar}/>);\n\n    return (\n        <div className={s.postBlock}>\n            <div className={s.textarea}>\n                <textarea name=\"addPost\"\n                          placeholder={\"How are you?\"}\n                          ref={newPostText}\n                          value={props.newPostText}\n                          onChange={onPostChange}\n                          className={s.postTextarea}\n                />\n                <div>\n                    <button onClick={addPost}>Add post</button>\n                </div>\n            </div>\n            <div>\n                {postData}\n            </div>\n        </div>\n    )\n};\n\nexport default PostsBlock;","import React, { useEffect, useState } from 'react'\nimport { ProfileType } from '../../../../store/profilePageReducer'\nimport s from '../Profile.module.css'\n\ntype PropsTypes = {\n  profile: ProfileType\n  status: string \n  updateUserStatus: (status: string) => void\n  setEditProfileMode: (boolean: boolean) => void\n}\n\nconst ProfileData: React.FC<PropsTypes> = ({ profile, status, updateUserStatus, setEditProfileMode }) => {\n  const [editMode, setEditMode] = useState(false)\n  const [localStatus, setStatus] = useState(status)\n\n  useEffect(() => {\n    setStatus(status)\n  }, [status])\n\n  const activateEditMode = () => {\n    setEditMode(true)\n  }\n\n  const deactivateEditMode = () => {\n    setEditMode(false)\n    updateUserStatus(localStatus)\n  }\n\n  const onStatusChange = (e: any) => {\n    setStatus(e.currentTarget.value)\n  }\n\n  const getContacts = () => {\n    return Object.entries(profile.contacts).map((item) => {\n      if (item[1]) {\n        return (\n          <div key={item[0]}>\n            <b>{item[0]}</b>: {item[1]}\n          </div>\n        )\n      }\n    })\n  }\n\n  return (\n    <div> \n        <button onClick={() => {setEditProfileMode(true)}}>Status edit mode</button>\n      <div className={s.status}>\n        {editMode ? (\n          <input\n            onChange={onStatusChange}\n            type=\"text\"\n            value={localStatus}\n            autoFocus={true}\n            onBlur={deactivateEditMode}\n          />\n        ) : (\n          <div>{status ? <span onClick={activateEditMode}><b>Status</b>: {status}</span> : <span> </span>}</div>\n        )}\n      </div>\n      <div className={s.profile}>\n        {profile.aboutMe && <div className={s.aboutMe}></div>}\n        <div className={s.lookingForAJob}>\n          <b>Looking for a job</b>: {profile.lookingForAJob ? 'Yes' : 'No'}\n        </div>\n        {profile.lookingForAJob && (\n          <div className={s.lookingForAJobDescription}><b>description</b>: {profile.lookingForAJobDescription}</div>\n        )}\n        {getContacts().some(item => item) ?\n        <div><b>Contacts</b>:\n        <div className={s.contacts}>{getContacts()}</div>\n        </div> : false\n        }\n        <div>\n          <b>id</b>: {profile.userId}\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default ProfileData","import React, { useEffect, useState } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { ProfileType } from '../../../../store/profilePageReducer'\nimport s from '../Profile.module.css'\nimport { createField, InputWithComment } from '../../../Common/FormsControls/FormsControls'\n\ntype PropsTypes = {\n  contactsKey: Array<string>,\n  profile: ProfileType\n  setEditProfileMode: (arg: boolean) => void,\n}\n\nconst ProfileFormData: React.FC<PropsTypes> = (props: any) => {\n  const createFieldForProfile = (inputNames: Array<string>) => {\n    return inputNames.map((item) => (\n      <div key={item}>\n        <span>{item}: </span>\n        {createField(`address on ${item}`, item, InputWithComment, [])}\n      </div>\n    ))\n  }\n\n  return (\n    <div>\n      <form onSubmit={props.handleSubmit}>\n        About me{createField('AboutMe', 'AboutMe', InputWithComment, [])}\n        Full name{createField('FullName', 'FullName', InputWithComment, [])} <br />\n        {createField(null, 'lookingForAJob', 'input', [], { type: 'checkbox' }, 'looking for a job?')} <br /> <br />\n        Looking for a job description\n        {createField('lookingForAJobDescription', 'lookingForAJobDescription', InputWithComment, [])}\n        <h3>Contacts</h3>\n        <div>{createFieldForProfile(props.contactsKey)}</div>\n        <Field name={'updateProfile'} component={'button'}>\n          Update Profile\n        </Field>\n        <button\n          onClick={() => {\n            props.setEditProfileMode(false)\n          }}\n        >\n          Cancel\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default reduxForm<any, PropsTypes, string>({\n  form: 'updateProfile',\n})(ProfileFormData)\n","import React, { useEffect, useState } from 'react'\nimport { ProfileType, UpdateProfileDataTypes } from '../../../../store/profilePageReducer'\nimport s from '../Profile.module.css'\nimport ProfileData from './ProfileData'\nimport ProfileFormData from './ProfileFormData'\n\ntype PropsTypes = {\n  profile: ProfileType\n  status: string \n  updateUserStatus: (status: string) => void\n  updateProfile: (data: UpdateProfileDataTypes) => void\n}\n\nconst ProfileBlock: React.FC<PropsTypes> = (props) => {\n  const submiteData = (data: any) => {\n    props.updateProfile(data)\n    console.log(data)\n  }\n\n  const [editProfileMode, setEditProfileMode] = useState(false)\n  const contactsKey = Object.keys(props.profile.contacts)\n return (\n<>\n{ editProfileMode ? \n  <ProfileFormData contactsKey={contactsKey} onSubmit={submiteData} setEditProfileMode={setEditProfileMode} profile={props.profile}/> :\n  <ProfileData {...props} setEditProfileMode={setEditProfileMode} />\n  }\n  </>\n )\n}\n\nexport default ProfileBlock\n","import React from 'react';\nimport s from \"../Profile.module.css\";\n\n\nconst ProfileImgBlock = (props) => {\n    return (\n        <div>\n            <img src=\"https://i.ibb.co/st5tL86/profile-Img.png\" alt=\"profile img\"/>\n        </div>\n    )\n};\n\nexport default ProfileImgBlock;","import React from 'react';\nimport s from \"../Profile.module.css\";\n\n\nconst ProjectsBlock = (props) => {\n    return (\n        <div>\n            <div>projects</div>\n        </div>\n    )\n};\n\nexport default ProjectsBlock;","import React from 'react'\nimport s from './Profile.module.css'\nimport AvatarBlock from './AvatarBlock/AvatarBlock'\nimport PhotoBlock from './PhotoBlock/PhotoBlock'\nimport PostsBlock from './PostsBlock/PostsBlock'\nimport ProfileBlock from './ProfileBlock/ProfileBlock'\nimport ProfileImgBlock from './ProfileImgBlock/ProfileImgBlock'\nimport ProjectsBlock from './ProjectBlock/ProjectsBlock'\nimport Preloader from '../../Common/Preloader/Preloader'\n\nconst Profile = (props) => {\n  if (!props.profile) {\n    return <Preloader />\n  }\n  return (\n    <div className={s.profilePage}>\n      <div className={s.profileImgBlock}>\n        <ProfileImgBlock />\n      </div>\n      <div className={s.avatarBlock + ' ' + s.block}>\n        <AvatarBlock\n          avatar={props.profile.photos.large}\n          name={props.profile.fullName}\n          isOwner={props.isOwner}\n          uploadUserPhoto={props.uploadUserPhoto}\n        />\n      </div>\n      <div className={s.profileBlock + ' ' + s.block}>\n        <ProfileBlock\n          profile={props.profile}\n          status={props.status}\n          updateUserStatus={props.updateUserStatus}\n          updateProfile={props.updateProfile}\n        />\n      </div>\n      <div className={s.projectsBlock + ' ' + s.block}>\n        <ProjectsBlock />\n      </div>\n      <div className={s.photoBlock + ' ' + s.block}>\n        <PhotoBlock />\n      </div>\n      <div className={s.postsBlock + ' ' + s.block}>\n        <PostsBlock\n          addPost={props.addPost}\n          updateNewPostText={props.updateNewPostText}\n          posts={props.posts}\n          newPostText={props.newPostText}\n          avatar={props.profile.photos.large}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Profile\n","import {profileAPI} from \"../api/api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./reduxStore\";\nimport { type } from \"node:os\";\n\nconst ADD_POST = 'profile/ADD_POST';\nconst DELETE_POST = \"profile/DELETE_POST\";\nconst UPDATE_NEW_POST_TEXT = \"profile/UPDATE_NEW_POST_TEXT\";\nconst SET_PROFILE = \"profile/SET_PROFILE\";\nconst SET_STATUS = \"profile/SET_STATUS\";\nconst SET_PHOTO = 'SET_PHOTO'\n\ntype InitialStateTypes = typeof initialState\n export type PostType = {\n    id: number\n    postText: string\n    likeCount: number\n}\nexport type UsersProfileType = {\n    id: number\n    position: string\n    responsibility: string\n    telephoneNumber: string\n    dateOfEmployment: string\n}\ntype ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\ntype PhotosType = {\n    small: string\n    large: string\n}\nexport type ProfileType = {\n    aboutMe: string | null\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n}\n\nlet initialState = {\n    posts: [\n        {\n            id: 2,\n            postText: 'This is new social network! I made my social network, with blackjack and whores!',\n            likeCount: 5\n        },\n        {id: 1, postText: 'Hello world!', likeCount: 3}\n    ] as Array<PostType>,\n    usersProfile: [\n        {\n            id: 1,\n            position: 'Boss',\n            responsibility: 'front-end',\n            telephoneNumber: '+7-910-934-32-07',\n            dateOfEmployment: '22.02.2020'\n        }\n    ] as Array<UsersProfileType>,\n    newPostText: '',\n    profile: null as ProfileType | null,\n    status: null as string | null\n};\n\ntype ActionsTypes =\n  | AddPostType\n  | UpdateNewPostTest\n  | SetProfile\n  | SetUserStatus\n  | DeletePostType\n  | SetPhotoType\n\nconst profilePageReducer = (state = initialState, action: ActionsTypes): InitialStateTypes => {\n    switch (action.type) {\n        case ADD_POST: {\n            return {\n                ...state,\n                posts: [{id: 3, postText: state.newPostText, likeCount: 0}, ...state.posts],\n                newPostText: ''\n            };\n        }\n        case DELETE_POST: {\n            return {\n                ...state, posts: state.posts.filter(post => post.id !== action.postId)\n            }\n        }\n        case UPDATE_NEW_POST_TEXT:\n            return {...state, newPostText: action.newPostText};\n        case SET_PROFILE:\n            return {...state, profile: action.profile};\n        case SET_STATUS:\n            return {...state, status: action.status};\n        case SET_PHOTO: \n            return {...state, profile: {...state.profile, photos: action.photos} as any}\n        default:\n            return state;\n    }\n};\n\ntype AddPostType = {\n    type: typeof ADD_POST\n}\nexport const addPost = (): AddPostType => ({type: ADD_POST});\n\ntype DeletePostType = {\n    type: typeof DELETE_POST\n    postId: number\n}\n\nexport const deletePost = (postId: number): DeletePostType => ({type: DELETE_POST, postId}) \n\ntype UpdateNewPostTest = {\n    type: typeof UPDATE_NEW_POST_TEXT\n    newPostText: string\n}\n\nexport const updateNewPostText = (newPostText: string): UpdateNewPostTest => ({\n    type: UPDATE_NEW_POST_TEXT,\n    newPostText\n});\n\ntype SetProfile = {\n    type: typeof SET_PROFILE\n    profile: ProfileType\n}\nconst setProfile = (profile: ProfileType): SetProfile => ({type: SET_PROFILE, profile});\n\ntype SetUserStatus = {\n    type: typeof SET_STATUS\n    status: string\n}\nconst setUserStatus = (status: string): SetUserStatus => ({type: SET_STATUS, status});\n\ntype SetPhotoType = {\n    type: typeof SET_PHOTO\n    photos: PhotosType\n}\n\nconst setUserPhoto = (photos: PhotosType): SetPhotoType => ({type: SET_PHOTO, photos})\n\n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\n\nexport const getProfile = (userId: number): ThunkType => async (dispatch) => {\nconst response = await profileAPI.getProfile(userId)\n    dispatch(setProfile(response))\n};\nexport const getUserStatus = (userId: number): ThunkType => async (dispatch) => {\n    const response = await profileAPI.getStatus(userId)\n    dispatch(setUserStatus(response))\n};\n\nexport const updateUserStatus = (status: string): ThunkType => async (dispatch) => {\n    const response = await profileAPI.updateStatus(status)\n    if (response.data.resultCode === 0) {\n        dispatch(setUserStatus(status))\n    }\n};\n\nexport const uploadUserPhoto = (photo: File): ThunkType => async (dispatch) => {\n    const response = await profileAPI.uploadPhoto(photo)\n    if (response.resultCode === 0) {\n        dispatch(setUserPhoto(response.data.photos) as any)\n    }\n};\n\nexport type UpdateProfileDataTypes = {\nAboutMe?: string\nFullName?: string\nfacebook?: string\ngithub?: string\ninstagram?: string\nlookingForAJob?: boolean\nlookingForAJobDescription?: string\nmainLink?: string\ntwitter?: string\nvk?: string\nwebsite?: string\nyoutube?: string\n}\n\nexport const updateProfile = (data: UpdateProfileDataTypes): ThunkType =>  async (dispatch) => {\n    const requestData = {\n        \"aboutMe\": data.AboutMe, \n        \"lookingForAJob\": data.lookingForAJob,\n        \"fullName\": data.FullName,\n        \"lookingForAJobDescription\": data.lookingForAJobDescription,\n        \"contacts\": {\n            github: data.github, facebook: data.facebook, instagram: data.instagram, vk: data.vk, twitter: data.twitter,\n         website: data.website, youtube: data.youtube, mainLink: data.mainLink\n        }}\nconst response = await profileAPI.updateProfile(requestData)\nif (response.resultCode === 0) {\n    dispatch(getProfile(6095))\n}\n} \n\nexport default profilePageReducer;","import React from 'react'\nimport Profile from './Profile'\nimport { connect } from 'react-redux'\nimport {\n  addPost,\n  getProfile,\n  getUserStatus,\n  updateNewPostText,\n  updateUserStatus,\n  uploadUserPhoto,\n  updateProfile,\n} from '../../../store/profilePageReducer'\nimport { Redirect, withRouter } from 'react-router-dom'\nimport { profileAPI } from '../../../api/api'\nimport { withRedirect } from '../../../utils/HOCs'\nimport { compose } from 'redux'\nimport { PostType, ProfileType, UpdateProfileDataTypes } from '../../../store/profilePageReducer'\nimport { AppStateType } from '../../../store/reduxStore'\n\ntype MapStatePropsType = {\n  posts: Array<PostType>,\n  newPostText: string | null,\n  profile: ProfileType | null,\n  status: string | null,\n  profileAPI: any, //Исправить!!!\n  defaultId: number | null,\n}\n\ntype MapDispatchPropsType = {\n  getProfile: (userId: number) => void,\n  addPost: () => void,\n  updateNewPostText: () => void,\n  getUserStatus: (userId: number) => void,\n  updateUserStatus: () => void,\n  uploadUserPhoto: (photo: File) => void,\n  updateProfile: (data: UpdateProfileDataTypes) => void,\n}\n\ntype OwnPropsType = {\n  match: any,\n}\n\ntype PropsType = MapDispatchPropsType & MapStatePropsType & OwnPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n  refreshData() {\n    let userId = this.props.match.params.userId\n    if (!userId) {\n      userId = this.props.defaultId\n      if (!userId) {\n        return <Redirect to=\"/login\" />\n      }\n    }\n    this.props.getProfile(userId)\n    this.props.getUserStatus(userId)\n  }\n\n  componentDidMount() {\n    this.refreshData()\n  }\n  componentDidUpdate(prevProps: PropsType) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshData()\n    }\n  }\n\n  render() {\n    return (\n      <Profile {...this.props} isOwner={!this.props.match.params.userId} uploadUserPhoto={this.props.uploadUserPhoto} />\n    )\n  }\n}\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    profileAPI: profileAPI,\n    defaultId: state.auth.id,\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps, {\n    getProfile,\n    addPost,\n    updateNewPostText,\n    getUserStatus,\n    updateUserStatus,\n    uploadUserPhoto,\n    updateProfile,\n  }),\n  withRouter,\n  withRedirect\n)(ProfileContainer)\n","import React from \"react\";\nimport s from \"./Header.module.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Header = (props) => {\n  return (\n    <header className={s.header}>\n      <div className={s.logo}>\n        <img src=\"https://i.ibb.co/Hx4qhXZ/VR-Group-logo-svg.png\" alt=\"logo\" />\n        <span>VReacte</span>\n      </div>\n      <div className={s.auth}>\n        {props.isLogin ? (\n          <div onClick={props.deleteAuthUserData}>{props.login}</div>\n        ) : (\n          <NavLink to=\"/login\">please login</NavLink>\n        )}\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport { connect } from \"react-redux\";\nimport { deleteAuthUserData } from \"../../store/authReducer\";\nimport { authAPI } from \"../../api/api\";\n\nclass HeaderContainer extends React.Component {\n  render() {\n    return <Header {...this.props} />;\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    login: state.auth.login,\n    isLogin: state.auth.isLogin,\n  };\n};\n\nexport default connect(mapStateToProps, { deleteAuthUserData })(\n  HeaderContainer\n);\n","import React from 'react'\nimport s from './Navbar.module.css'\nimport { NavLink } from 'react-router-dom'\n\nconst Sidebar = (props) => {\n  return (\n    <nav className={s.navbar}>\n      <div className={s.background}></div>\n      <div className={s.menu}>\n        <div>\n          <NavLink to={'/profile/'} activeClassName={s.activeLink}>\n            Profile\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>\n            Messages\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/news\" activeClassName={s.activeLink}>\n            News\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/music\" activeClassName={s.activeLink}>\n            Music\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/settings\" activeClassName={s.activeLink}>\n            Settings\n          </NavLink>\n        </div>\n        <div>\n          <NavLink to=\"/users\" activeClassName={s.activeLink}>\n            Users\n          </NavLink>\n        </div>\n        <br />\n        <div>\n          <NavLink to=\"/friends\" activeClassName={s.activeLink}>\n            Friends\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Sidebar\n","import { getMe } from \"./authReducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./reduxStore\";\n\nconst INITIALIZED_SUCCESS = \"app/INITIALIZED_SUCCESS\";\n\ntype InitialStateType = typeof initialState;\n\ntype ActionsTypes = InitializedSuccessTypes;\n\nlet initialState = {\n  isInitialized: false,\n};\n\nconst appReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case INITIALIZED_SUCCESS:\n      return {\n        ...state,\n        isInitialized: true,\n      };\n    default:\n      return state;\n  }\n};\n\ntype InitializedSuccessTypes = {\n  type: typeof INITIALIZED_SUCCESS;\n};\n\nconst initializedSuccess = (): InitializedSuccessTypes => ({\n  type: INITIALIZED_SUCCESS,\n});\n\ntype ThunkType = ThunkAction<\n  Promise<void>,\n  AppStateType,\n  unknown,\n  ActionsTypes\n>;\n\nexport const initialApp = () => (dispatch: any) => {\n  dispatch(getMe()).then(() => {\n    dispatch(initializedSuccess());\n  });\n};\n\nexport default appReducer;\n","import React from 'react'\nimport './App.css'\nimport Footer from './Components/Footer/Footer'\nimport Background from './Components/Background'\nimport { Route, Redirect } from 'react-router-dom'\nimport Users from './Components/Content/Users/Users'\nimport ProfileContainer from './Components/Content/Profile/ProfileContainer'\nimport HeaderContainer from './Components/Header/HeaderContainer'\nimport Sidebar from './Components/Sidebar/Sidebar'\nimport { connect } from 'react-redux'\nimport Preloader from './Components/Common/Preloader/Preloader'\nimport { initialApp } from './store/appReducer'\nimport { WithSuspense } from './utils/HOCs'\n\nconst DialogsContainer = React.lazy(() => import('./Components/Content/Dialogs/DialogsContainer'))\nconst FriendsContainer = React.lazy(() => import('./Components/Content/Friends/FriendsContainer'))\nconst LoginContainer = React.lazy(() => import('./Components/Login/Login'))\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.initialApp()\n  }\n\n  render() {\n    if (!this.props.isInitialized) return <Preloader />\n\n    return (\n      <div className=\"app\">\n        <HeaderContainer />\n        <Sidebar />\n        <div className=\"content\">\n          <Route exact path=\"/\" render={() => <Redirect to={'/profile'} />} />\n          <Route path=\"/profile/:userId?\" render={() => <ProfileContainer />} />\n          <Route path=\"/dialogs\" render={WithSuspense(DialogsContainer)} />\n          <Route path=\"/users\" render={() => <Users />} />\n          <Route path=\"/friends\" render={WithSuspense(FriendsContainer)} />\n          <Route path=\"/login\" render={WithSuspense(LoginContainer)} />\n        </div>\n        <div className=\"background\">\n          <Background />\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nconst MepStateToProps = (state) => ({\n  isInitialized: state.app.isInitialized,\n})\n\nexport default connect(MepStateToProps, { initialApp })(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","type InitialStateType = typeof initialState\n\ntype ImpotantFriendsType = {\n    id: number\n    name: string\n    avatar: string\n}\n\ntype ActionsTypes = {}\n\nlet initialState = {\n    navBar: [\n        {id: 1, name: 'Pashok', avatar: 'https://i.ibb.co/HxhbGXP/Zoidberg-rev.jpg'},\n        {id: 2, name: 'Polina', avatar: 'https://i.ibb.co/bQdMS9z/Amy-rev.jpg'},\n        {id: 3, name: 'Vovan', avatar: 'https://i.ibb.co/0BRBtWB/unnamed.gif'}\n    ] as Array<ImpotantFriendsType>\n};\n\nconst navBarReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n\nreturn state;\n};\n\nexport default navBarReducer;","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\nimport profilePageReducer from \"./profilePageReducer\";\nimport dialogsPageReducer from \"./dialogsPageReducer\";\nimport navBarReducer from \"./navBarReducer\";\nimport usersReducer from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { reducer as formReducer } from \"redux-form\";\nimport appReducer from \"./appReducer\";\n\nlet rootReducer = combineReducers({\n  profilePage: profilePageReducer,\n  dialogsPage: dialogsPageReducer,\n  navBar: navBarReducer,\n  usersPage: usersReducer,\n  auth: authReducer,\n  form: formReducer,\n  app: appReducer,\n});\n\ntype rootReducerType = typeof rootReducer;\nexport type AppStateType = ReturnType<rootReducerType>;\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\n// @ts-ignore\nwindow.store = store.getState();\n\nexport default store;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\nimport store from './store/reduxStore'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n","export default __webpack_public_path__ + \"static/media/preloader.5342aab4.svg\";","import React from 'react';\nimport preloader from \"../../../img/effects/preloader.svg\";\n\n\nconst Preloader = () => <div id=\"preloaderImg\"><img src={preloader} alt=\"load\"/></div>;\n\nexport default Preloader;","export const updateObjectInArray = (items: any, objPropName: string, itemsId: number, newObjProps: any) => {\n  return items.map((item: any) => {\n    if (item[objPropName] === itemsId) {\n      return { ...item, ...newObjProps }\n    }\n    return item\n  })\n}\n","import { usersAPI } from \"./../api/api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./reduxStore\";\nimport { updateObjectInArray } from \"../utils/helper\";\n\nconst FOLLOW = \"users/FOLLOW\";\nconst UNFOLLOW = \"users/UNFOLLOW\";\nconst SET_USERS = \"users/SET_USERS\";\nconst SET_CURRENT_PAGE = \"users/SET_CURRENT_PAGE\";\nconst SET_USERS_TOTAL_COUNT = \"users/SET_USERS_TOTAL_COUNT\";\nconst TOGGLE_ISLOAD = \"users/TOGGLE_ISLOAD\";\nconst SET_CURRENT_PORTION = 'SET_CURRENT_PORTION'\n\nexport type InitialStateType = typeof initialState;\n\ntype PhotosType = {\n  small: string;\n  large: string;\n};\n\nexport type UserType = {\n  id: number;\n  name: string;\n  status: string;\n  photos: PhotosType;\n  followed: boolean;\n};\n\nlet initialState = {\n  users: [] as Array<UserType>,\n  pageSize: 100,\n  totalUsersCount: 0,\n  currentPage: 1,\n  isLoad: false,\n  portionSize: 20,\n  currentPortion: 1\n};\n\ntype ActionsTypes =\n  | FollowSuccessActionType\n  | UnfollowSuccessActionType\n  | SetUsersActionType\n  | SetCurrentPage\n  | SetUsersTotalCount\n  | ToggleIsLoad\n  | SetCurrentPortion\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\n  switch (action.type) {\n    case FOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, 'id', action.userId, {followed: true})\n      };\n    case UNFOLLOW:\n      return {\n        ...state,\n        users: updateObjectInArray(state.users, 'id', action.userId, {followed: false})\n      };\n    case SET_USERS:\n      return { ...state, users: action.users };\n    case SET_CURRENT_PAGE:\n      return { ...state, currentPage: action.currentPage, users: [] };\n    case SET_USERS_TOTAL_COUNT:\n      return { ...state, totalUsersCount: action.totalUsersCount };\n    case TOGGLE_ISLOAD:\n      return { ...state, isLoad: action.isLoad };\n      case SET_CURRENT_PORTION:\n        return {\n          ...state, currentPortion: action.newCurrentPortion\n        }\n    default:\n      return state;\n  }\n};\n\ntype FollowSuccessActionType = {\n  type: typeof FOLLOW;\n  userId: number;\n};\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({\n  type: FOLLOW,\n  userId,\n});\n\ntype UnfollowSuccessActionType = {\n  type: typeof UNFOLLOW;\n  userId: number;\n};\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({\n  type: UNFOLLOW,\n  userId,\n});\n\ntype SetUsersActionType = {\n  type: typeof SET_USERS;\n  users: any;\n};\nexport const setUsers = (users: any): SetUsersActionType => ({\n  type: SET_USERS,\n  users,\n});\n\ntype SetCurrentPage = {\n  type: typeof SET_CURRENT_PAGE;\n  currentPage: number;\n};\nexport const setCurrentPage = (currentPage: number): SetCurrentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage,\n});\n\ntype SetUsersTotalCount = {\n  type: typeof SET_USERS_TOTAL_COUNT;\n  totalUsersCount: number;\n};\nexport const setUsersTotalCount = (totalUsersCount: number): SetUsersTotalCount => ({\n  type: SET_USERS_TOTAL_COUNT,\n  totalUsersCount,\n});\n\ntype ToggleIsLoad = {\n  type: typeof TOGGLE_ISLOAD;\n  isLoad: boolean;\n};\nexport const toggleIsLoad = (isLoad: boolean): ToggleIsLoad => ({\n  type: TOGGLE_ISLOAD,\n  isLoad,\n});\n\ntype SetCurrentPortion = {\n  type: typeof SET_CURRENT_PORTION\n  newCurrentPortion: number\n}\n\nexport const setCurrentPortion = (newCurrentPortion: number): SetCurrentPortion => ({type: SET_CURRENT_PORTION, newCurrentPortion}) \n\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\n\nexport const getUsers = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\n  dispatch(toggleIsLoad(true));\n  const response = await usersAPI.getUsers(currentPage, pageSize);\n  dispatch(toggleIsLoad(false));\n  dispatch(setUsers(response.items));\n  dispatch(setUsersTotalCount(response.totalCount));\n};\n\nconst followUnfollowCommonPart = async (\n  apiMethod: (userId: number) => Promise<any>,\n  action: FollowSuccessActionType | UnfollowSuccessActionType,\n  dispatch: any,\n  userId: number\n) => {\n  const response = await apiMethod(userId);\n  if (response.resultCode === 0) {\n    dispatch(action);\n  }\n};\n\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\n  followUnfollowCommonPart(usersAPI.follow.bind(usersAPI), followSuccess(userId), dispatch, userId);\n};\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\n  followUnfollowCommonPart(usersAPI.unfollow.bind(usersAPI), unfollowSuccess(userId), dispatch, userId);\n};\n\nexport default usersReducer;\n","import { authAPI } from \"../api/api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { AppStateType } from \"./reduxStore\";\nimport { stopSubmit } from \"redux-form\";\nimport { SubmiteAuthDataTypes } from \"../common/types/types\";\n\nconst SET_AUTH_USER_DATA = \"auth/SET_AUTH_USER_DATA\";\nconst SET_CAPTCHA_URL = \"auth/SET_CAPTCHA_URL\";\n\ntype InitialStateType = typeof initialState;\n\nlet initialState = {\n  id: null as number | null,\n  login: null as string | null,\n  email: null as string | null,\n  isLogin: false,\n  captchaUrl: null as string | null,\n};\n\ntype ActionsTypes = SetUserData | SetCaptchaUrlType;\n\nconst authReducer = (\n  state = initialState,\n  action: ActionsTypes\n): InitialStateType => {\n  switch (action.type) {\n    case SET_AUTH_USER_DATA:\n      return {\n        ...state,\n        ...action.data,\n        isLogin: action.isLogin,\n      };\n    case SET_CAPTCHA_URL:\n      return {\n        ...state,\n        captchaUrl: action.captchaUrl,\n      };\n    default:\n      return state;\n  }\n};\n\ntype SetUserDataPayload = {\n  id: number | null;\n  login: string | null;\n  email: string | null;\n};\ntype SetUserData = {\n  type: typeof SET_AUTH_USER_DATA;\n  data: SetUserDataPayload;\n  isLogin: boolean;\n};\n\nconst setUserData = (\n  data: SetUserDataPayload,\n  isLogin: boolean\n): SetUserData => ({\n  type: SET_AUTH_USER_DATA,\n  data,\n  isLogin,\n});\n\ntype SetCaptchaUrlType = {\n  type: typeof SET_CAPTCHA_URL;\n  captchaUrl: string;\n};\n\nconst setCaptchaUrl = (captchaUrl: string): SetCaptchaUrlType => ({\n  type: SET_CAPTCHA_URL,\n  captchaUrl,\n});\n\ntype ThunkType = ThunkAction<\n  Promise<void>,\n  AppStateType,\n  unknown,\n  ActionsTypes\n>;\n\nexport const getMe = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.getMe();\n  if (response.resultCode === 0) {\n    dispatch(setUserData(response.data, true));\n  } else {\n    dispatch(setUserData({ id: null, login: null, email: null }, false));\n  }\n};\n\nexport const sendAuthUserData = (\n  data: SubmiteAuthDataTypes\n): ThunkType => async (dispatch) => {\n  const response = await authAPI.login(data);\n  const errorText =\n    response.messages.length > 0 ? response.messages[0] : \"Some Error\";\n  if (response.resultCode === 0) {\n    dispatch(getMe());\n  } else if (response.resultCode === 1) {\n    dispatch(stopSubmit(\"login\", { _error: errorText }) as any); // Исправить\n  } else if (response.resultCode === 10) {\n    const captchaUrl = await authAPI.getCaptchaUrl();\n    dispatch(setCaptchaUrl(captchaUrl.url));\n  }\n};\n\nexport const deleteAuthUserData = (): ThunkType => async (dispatch) => {\n  const response = await authAPI.logout();\n  if (response.resultCode === 0) {\n    dispatch(getMe());\n  }\n};\n\nexport default authReducer;\n","import React, { Suspense } from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport s from '../Components/Common/FormsControls/FormsControl.module.css'\nimport Preloader from '../Components/Common/Preloader/Preloader'\n\nconst mapStateToPropsForRedirect = (state) => {\n  return {\n    isLogin: state.auth.isLogin,\n  }\n}\n\nexport const withRedirect = (Component) => {\n  const createRedirectContainerComponent = (props) => {\n    if (!props.isLogin) {\n      return <Redirect to={'/login'} />\n    }\n    return <Component {...props} />\n  }\n  return connect(mapStateToPropsForRedirect)(createRedirectContainerComponent)\n}\n\nexport const withTag = (Element) => ({ input, meta, ...props }) => {\n  const hasError = meta.touched && meta.error\n  return (\n    <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\n      <Element {...input} {...props} />\n      {hasError && <span> {meta.error} </span>}\n    </div>\n  )\n}\n\nexport const WithSuspense = (Component) => () => {\n  return (\n    <Suspense fallback={<Preloader />}>\n      <Component />\n    </Suspense>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__11g5d\",\"error\":\"FormsControl_error__1uqcA\",\"redText\":\"FormsControl_redText__2dzox\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePage\":\"Profile_profilePage__F-bi9\",\"profileImgBlock\":\"Profile_profileImgBlock__28v2T\",\"avatarBlock\":\"Profile_avatarBlock__17wuG\",\"avatar\":\"Profile_avatar__35jdq\",\"profileBlock\":\"Profile_profileBlock__2MyBW\",\"projectsBlock\":\"Profile_projectsBlock__31E9L\",\"photoBlock\":\"Profile_photoBlock__3LVV_\",\"postsBlock\":\"Profile_postsBlock__31xi2\",\"textarea\":\"Profile_textarea__2YHwN\",\"block\":\"Profile_block__1631X\",\"name\":\"Profile_name__1oLAi\",\"postTextarea\":\"Profile_postTextarea__3Ct1I\",\"profileInfo\":\"Profile_profileInfo__2ZnTm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1CGKd\",\"logo\":\"Header_logo__ffv_d\",\"auth\":\"Header_auth__2BNLo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1x1up\",\"text\":\"Post_text__1RXiU\"};"],"sourceRoot":""}